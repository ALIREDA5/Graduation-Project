
GB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800074  00800074  00000d64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003295  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001160  00000000  00000000  000044f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002328  00000000  00000000  00005655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d40  00000000  00000000  00007980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012e5  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca2  00000000  00000000  000099a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  0000c647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_1>
   8:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_2>
   c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_3>
  10:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_4>
  14:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_5>
  18:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_6>
  1c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_7>
  20:	0c 94 02 05 	jmp	0xa04	; 0xa04 <__vector_8>
  24:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_9>
  28:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_10>
  2c:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__vector_11>
  30:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_12>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_15>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	03 03       	mulsu	r16, r19
  56:	0d 03       	fmul	r16, r21
  58:	17 03       	mulsu	r17, r23
  5a:	21 03       	mulsu	r18, r17
  5c:	2b 03       	fmul	r18, r19
  5e:	35 03       	mulsu	r19, r21
  60:	3f 03       	fmul	r19, r23
  62:	49 03       	fmul	r20, r17
  64:	1e 04       	cpc	r1, r14
  66:	28 04       	cpc	r2, r8
  68:	32 04       	cpc	r3, r2
  6a:	3c 04       	cpc	r3, r12
  6c:	46 04       	cpc	r4, r6
  6e:	50 04       	cpc	r5, r0
  70:	5a 04       	cpc	r5, r10
  72:	64 04       	cpc	r6, r4

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ec eb       	ldi	r30, 0xBC	; 188
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 37       	cpi	r26, 0x74	; 116
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 e7       	ldi	r26, 0x74	; 116
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 38       	cpi	r26, 0x8C	; 140
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 91 01 	call	0x322	; 0x322 <main>
  aa:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <LCD_WriteCmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
  b6:	84 fb       	bst	r24, 4
  b8:	66 27       	eor	r22, r22
  ba:	60 f9       	bld	r22, 0
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  c2:	c5 fb       	bst	r28, 5
  c4:	66 27       	eor	r22, r22
  c6:	60 f9       	bld	r22, 0
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  ce:	c6 fb       	bst	r28, 6
  d0:	66 27       	eor	r22, r22
  d2:	60 f9       	bld	r22, 0
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  da:	6c 2f       	mov	r22, r28
  dc:	66 1f       	adc	r22, r22
  de:	66 27       	eor	r22, r22
  e0:	66 1f       	adc	r22, r22
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	89 e0       	ldi	r24, 0x09	; 9
  f4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 100:	8f ec       	ldi	r24, 0xCF	; 207
 102:	97 e0       	ldi	r25, 0x07	; 7
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_WriteCmd+0x52>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_WriteCmd+0x58>
 10a:	00 00       	nop
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	8a e0       	ldi	r24, 0x0A	; 10
 110:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 114:	6c 2f       	mov	r22, r28
 116:	61 70       	andi	r22, 0x01	; 1
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 11e:	c1 fb       	bst	r28, 1
 120:	66 27       	eor	r22, r22
 122:	60 f9       	bld	r22, 0
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 12a:	c2 fb       	bst	r28, 2
 12c:	66 27       	eor	r22, r22
 12e:	60 f9       	bld	r22, 0
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 136:	c3 fb       	bst	r28, 3
 138:	66 27       	eor	r22, r22
 13a:	60 f9       	bld	r22, 0
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 15a:	8f ec       	ldi	r24, 0xCF	; 207
 15c:	97 e0       	ldi	r25, 0x07	; 7
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_WriteCmd+0xac>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_WriteCmd+0xb2>
 164:	00 00       	nop
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	97 e2       	ldi	r25, 0x27	; 39
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_WriteCmd+0xc0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_WriteCmd+0xc6>
 178:	00 00       	nop
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <LCD_Init>:
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Init+0x4>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Init+0xa>
 188:	00 00       	nop
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Init+0x16>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Init+0x1c>
 19a:	00 00       	nop
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 1a2:	8f ec       	ldi	r24, 0xCF	; 207
 1a4:	97 e0       	ldi	r25, 0x07	; 7
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Init+0x28>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Init+0x2e>
 1ac:	00 00       	nop
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 1b4:	8f ec       	ldi	r24, 0xCF	; 207
 1b6:	97 e0       	ldi	r25, 0x07	; 7
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x3a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x40>
 1be:	00 00       	nop
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 1c6:	8f e9       	ldi	r24, 0x9F	; 159
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_Init+0x4c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_Init+0x52>
 1d0:	00 00       	nop
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 1d8:	8f ec       	ldi	r24, 0xCF	; 207
 1da:	97 e0       	ldi	r25, 0x07	; 7
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Init+0x5e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Init+0x64>
 1e2:	00 00       	nop
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 1ea:	08 95       	ret

000001ec <LCD_WriteData>:
 1ec:	cf 93       	push	r28
 1ee:	c8 2f       	mov	r28, r24
 1f0:	84 fb       	bst	r24, 4
 1f2:	66 27       	eor	r22, r22
 1f4:	60 f9       	bld	r22, 0
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 1fc:	c5 fb       	bst	r28, 5
 1fe:	66 27       	eor	r22, r22
 200:	60 f9       	bld	r22, 0
 202:	85 e0       	ldi	r24, 0x05	; 5
 204:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 208:	c6 fb       	bst	r28, 6
 20a:	66 27       	eor	r22, r22
 20c:	60 f9       	bld	r22, 0
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 214:	6c 2f       	mov	r22, r28
 216:	66 1f       	adc	r22, r22
 218:	66 27       	eor	r22, r22
 21a:	66 1f       	adc	r22, r22
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	89 e0       	ldi	r24, 0x09	; 9
 22e:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 23a:	8f ec       	ldi	r24, 0xCF	; 207
 23c:	97 e0       	ldi	r25, 0x07	; 7
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_WriteData+0x52>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_WriteData+0x58>
 244:	00 00       	nop
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 24e:	6c 2f       	mov	r22, r28
 250:	61 70       	andi	r22, 0x01	; 1
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 258:	c1 fb       	bst	r28, 1
 25a:	66 27       	eor	r22, r22
 25c:	60 f9       	bld	r22, 0
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 264:	c2 fb       	bst	r28, 2
 266:	66 27       	eor	r22, r22
 268:	60 f9       	bld	r22, 0
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 270:	c3 fb       	bst	r28, 3
 272:	66 27       	eor	r22, r22
 274:	60 f9       	bld	r22, 0
 276:	87 e0       	ldi	r24, 0x07	; 7
 278:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	89 e0       	ldi	r24, 0x09	; 9
 288:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	8a e0       	ldi	r24, 0x0A	; 10
 290:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 294:	8f ec       	ldi	r24, 0xCF	; 207
 296:	97 e0       	ldi	r25, 0x07	; 7
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_WriteData+0xac>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_WriteData+0xb2>
 29e:	00 00       	nop
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_Writepin>
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCD_GOTO>:
 2ac:	88 23       	and	r24, r24
 2ae:	29 f0       	breq	.+10     	; 0x2ba <LCD_GOTO+0xe>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <LCD_GOTO+0x14>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <LCD_GOTO+0x18>
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LCD_GOTO+0x18>
 2c0:	80 ec       	ldi	r24, 0xC0	; 192
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	60 31       	cpi	r22, 0x10	; 16
 2c6:	10 f4       	brcc	.+4      	; 0x2cc <LCD_GOTO+0x20>
 2c8:	86 0f       	add	r24, r22
 2ca:	91 1d       	adc	r25, r1
 2cc:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCmd>
 2d0:	08 95       	ret

000002d2 <LCD_WriteString>:
}

/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	8c 01       	movw	r16, r24
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <LCD_WriteString+0x1e>
	{
		LCD_WriteData(str[i]);
 2de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_WriteData>
 2e2:	8f ec       	ldi	r24, 0xCF	; 207
 2e4:	97 e0       	ldi	r25, 0x07	; 7
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_WriteString+0x14>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_WriteString+0x1a>
 2ec:	00 00       	nop
/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 2ee:	cf 5f       	subi	r28, 0xFF	; 255
 2f0:	f8 01       	movw	r30, r16
 2f2:	ec 0f       	add	r30, r28
 2f4:	f1 1d       	adc	r31, r1
 2f6:	80 81       	ld	r24, Z
 2f8:	81 11       	cpse	r24, r1
 2fa:	f1 cf       	rjmp	.-30     	; 0x2de <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[i]);
		_delay_ms(1);
	}
}
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	08 95       	ret

00000304 <Servo_Init>:

/*------------------------- Function Definitions -----------------------------*/

void Servo_Init(void)
{
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE , TIMER1_SCALER_8 , OCRA_NON_INVERTING , OCRB_DISCONNECTED);
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	42 e0       	ldi	r20, 0x02	; 2
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	0e 94 c6 03 	call	0x78c	; 0x78c <Timer1_Init>
	ICR1 = 19999;
 310:	8f e1       	ldi	r24, 0x1F	; 31
 312:	9e e4       	ldi	r25, 0x4E	; 78
 314:	97 bd       	out	0x27, r25	; 39
 316:	86 bd       	out	0x26, r24	; 38
	SERVO_PIN = 999;
 318:	87 ee       	ldi	r24, 0xE7	; 231
 31a:	93 e0       	ldi	r25, 0x03	; 3
 31c:	9b bd       	out	0x2b, r25	; 43
 31e:	8a bd       	out	0x2a, r24	; 42
 320:	08 95       	ret

00000322 <main>:
#include "APP/To_Start.h"


int main(void)
{
	uart_init(bits_8,bit_1,Disabled,synchronous);
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	83 e0       	ldi	r24, 0x03	; 3
 32a:	0e 94 a0 05 	call	0xb40	; 0xb40 <uart_init>
	Servo_Init();
 32e:	0e 94 82 01 	call	0x304	; 0x304 <Servo_Init>
	TIMER0_Init(CTC,TIMER0_SCALER_8,Disconnected);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 d5 02 	call	0x5aa	; 0x5aa <TIMER0_Init>
	LCD_Init();
 33c:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Init>
	LCD_GOTO(0,4);
 340:	64 e0       	ldi	r22, 0x04	; 4
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_GOTO>
	LCD_WriteString("Multi Level Garage");
 348:	81 e6       	ldi	r24, 0x61	; 97
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCD_WriteString>
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0x2e>

00000352 <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
 352:	98 2f       	mov	r25, r24
 354:	96 95       	lsr	r25
 356:	96 95       	lsr	r25
 358:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 35a:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
 35c:	61 30       	cpi	r22, 0x01	; 1
 35e:	e1 f5       	brne	.+120    	; 0x3d8 <DIO_Writepin+0x86>
		
		switch(port){
 360:	91 30       	cpi	r25, 0x01	; 1
 362:	99 f0       	breq	.+38     	; 0x38a <DIO_Writepin+0x38>
 364:	28 f0       	brcs	.+10     	; 0x370 <DIO_Writepin+0x1e>
 366:	92 30       	cpi	r25, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <DIO_Writepin+0x52>
 36a:	93 30       	cpi	r25, 0x03	; 3
 36c:	41 f1       	breq	.+80     	; 0x3be <DIO_Writepin+0x6c>
 36e:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
 370:	4b b3       	in	r20, 0x1b	; 27
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_Writepin+0x2c>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_Writepin+0x28>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	8b bb       	out	0x1b, r24	; 27
			break;
 388:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 38a:	48 b3       	in	r20, 0x18	; 24
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_Writepin+0x46>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	8a 95       	dec	r24
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_Writepin+0x42>
 39c:	cb 01       	movw	r24, r22
 39e:	84 2b       	or	r24, r20
 3a0:	88 bb       	out	0x18, r24	; 24
			break;
 3a2:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 3a4:	45 b3       	in	r20, 0x15	; 21
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	b9 01       	movw	r22, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_Writepin+0x60>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	8a 95       	dec	r24
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_Writepin+0x5c>
 3b6:	cb 01       	movw	r24, r22
 3b8:	84 2b       	or	r24, r20
 3ba:	85 bb       	out	0x15, r24	; 21
			break;
 3bc:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 3be:	42 b3       	in	r20, 0x12	; 18
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_Writepin+0x7a>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_Writepin+0x76>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	82 bb       	out	0x12, r24	; 18
			break;
 3d6:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
 3d8:	61 11       	cpse	r22, r1
 3da:	3f c0       	rjmp	.+126    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		switch(port){
 3dc:	91 30       	cpi	r25, 0x01	; 1
 3de:	a1 f0       	breq	.+40     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e0:	28 f0       	brcs	.+10     	; 0x3ec <DIO_Writepin+0x9a>
 3e2:	92 30       	cpi	r25, 0x02	; 2
 3e4:	f9 f0       	breq	.+62     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3e6:	93 30       	cpi	r25, 0x03	; 3
 3e8:	59 f1       	breq	.+86     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3ea:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
 3ec:	4b b3       	in	r20, 0x1b	; 27
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_Writepin+0xa8>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_Writepin+0xa4>
 3fe:	cb 01       	movw	r24, r22
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8b bb       	out	0x1b, r24	; 27
			break;
 406:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 408:	48 b3       	in	r20, 0x18	; 24
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	88 bb       	out	0x18, r24	; 24
			break;
 422:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 424:	45 b3       	in	r20, 0x15	; 21
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	85 bb       	out	0x15, r24	; 21
			break;
 43e:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 440:	42 b3       	in	r20, 0x12	; 18
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	b9 01       	movw	r22, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	8a 95       	dec	r24
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	cb 01       	movw	r24, r22
 454:	80 95       	com	r24
 456:	84 23       	and	r24, r20
 458:	82 bb       	out	0x12, r24	; 18
 45a:	08 95       	ret

0000045c <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
 47e:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <Fptr_EXI0>
 482:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <Fptr_EXI0+0x1>
 486:	30 97       	sbiw	r30, 0x00	; 0
 488:	09 f0       	breq	.+2      	; 0x48c <__vector_1+0x30>
		Fptr_EXI0();
 48a:	09 95       	icall
	}
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
 4d0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Fptr_EXI1>
 4d4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Fptr_EXI1+0x1>
 4d8:	30 97       	sbiw	r30, 0x00	; 0
 4da:	09 f0       	breq	.+2      	; 0x4de <__vector_2+0x30>
		Fptr_EXI1();
 4dc:	09 95       	icall
	}
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	bf 91       	pop	r27
 4e4:	af 91       	pop	r26
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	7f 91       	pop	r23
 4ec:	6f 91       	pop	r22
 4ee:	5f 91       	pop	r21
 4f0:	4f 91       	pop	r20
 4f2:	3f 91       	pop	r19
 4f4:	2f 91       	pop	r18
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	2f 93       	push	r18
 50c:	3f 93       	push	r19
 50e:	4f 93       	push	r20
 510:	5f 93       	push	r21
 512:	6f 93       	push	r22
 514:	7f 93       	push	r23
 516:	8f 93       	push	r24
 518:	9f 93       	push	r25
 51a:	af 93       	push	r26
 51c:	bf 93       	push	r27
 51e:	ef 93       	push	r30
 520:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
 522:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end>
 526:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x1>
 52a:	30 97       	sbiw	r30, 0x00	; 0
 52c:	09 f0       	breq	.+2      	; 0x530 <__vector_3+0x30>
		Fptr_EXI2();
 52e:	09 95       	icall
	}
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <SPI_recieve_noblock>:
	SET_BIT(SPCR,SPIE);
}

void SPI_interrupt_disable()
{
	CLEAR_BIT(SPCR,SPIE);
 552:	2f b1       	in	r18, 0x0f	; 15
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
 558:	08 95       	ret

0000055a <__vector_12>:
}

ISR(SPI_STC_vect)
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	2f 93       	push	r18
 566:	3f 93       	push	r19
 568:	4f 93       	push	r20
 56a:	5f 93       	push	r21
 56c:	6f 93       	push	r22
 56e:	7f 93       	push	r23
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
 574:	af 93       	push	r26
 576:	bf 93       	push	r27
 578:	ef 93       	push	r30
 57a:	ff 93       	push	r31
	SPI_recieve_noblock(pdata);
 57c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <pdata>
 580:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <pdata+0x1>
 584:	0e 94 a9 02 	call	0x552	; 0x552 <SPI_recieve_noblock>
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <TIMER0_Init>:
	
	pf_OC=pf;
	C_set=(1000000*time)/200;
	OCR0=200;
	TIMER0_OC_SetCallBack(fun_oc0);
	TIMER0_OCInterrupt_Enable();
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	69 f0       	breq	.+26     	; 0x5c8 <TIMER0_Init+0x1e>
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <TIMER0_Init+0x10>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	89 f0       	breq	.+34     	; 0x5d6 <TIMER0_Init+0x2c>
 5b4:	83 30       	cpi	r24, 0x03	; 3
 5b6:	b1 f0       	breq	.+44     	; 0x5e4 <TIMER0_Init+0x3a>
 5b8:	1b c0       	rjmp	.+54     	; 0x5f0 <TIMER0_Init+0x46>
 5ba:	83 b7       	in	r24, 0x33	; 51
 5bc:	8f 7b       	andi	r24, 0xBF	; 191
 5be:	83 bf       	out	0x33, r24	; 51
 5c0:	83 b7       	in	r24, 0x33	; 51
 5c2:	87 7f       	andi	r24, 0xF7	; 247
 5c4:	83 bf       	out	0x33, r24	; 51
 5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <TIMER0_Init+0x46>
 5c8:	83 b7       	in	r24, 0x33	; 51
 5ca:	80 64       	ori	r24, 0x40	; 64
 5cc:	83 bf       	out	0x33, r24	; 51
 5ce:	83 b7       	in	r24, 0x33	; 51
 5d0:	87 7f       	andi	r24, 0xF7	; 247
 5d2:	83 bf       	out	0x33, r24	; 51
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <TIMER0_Init+0x46>
 5d6:	83 b7       	in	r24, 0x33	; 51
 5d8:	8f 7b       	andi	r24, 0xBF	; 191
 5da:	83 bf       	out	0x33, r24	; 51
 5dc:	83 b7       	in	r24, 0x33	; 51
 5de:	88 60       	ori	r24, 0x08	; 8
 5e0:	83 bf       	out	0x33, r24	; 51
 5e2:	06 c0       	rjmp	.+12     	; 0x5f0 <TIMER0_Init+0x46>
 5e4:	83 b7       	in	r24, 0x33	; 51
 5e6:	80 64       	ori	r24, 0x40	; 64
 5e8:	83 bf       	out	0x33, r24	; 51
 5ea:	83 b7       	in	r24, 0x33	; 51
 5ec:	88 60       	ori	r24, 0x08	; 8
 5ee:	83 bf       	out	0x33, r24	; 51
 5f0:	86 2f       	mov	r24, r22
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	88 30       	cpi	r24, 0x08	; 8
 5f6:	91 05       	cpc	r25, r1
 5f8:	08 f0       	brcs	.+2      	; 0x5fc <TIMER0_Init+0x52>
 5fa:	54 c0       	rjmp	.+168    	; 0x6a4 <TIMER0_Init+0xfa>
 5fc:	fc 01       	movw	r30, r24
 5fe:	e6 5d       	subi	r30, 0xD6	; 214
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	0c 94 56 06 	jmp	0xcac	; 0xcac <__tablejump2__>
 606:	83 b7       	in	r24, 0x33	; 51
 608:	8e 7f       	andi	r24, 0xFE	; 254
 60a:	83 bf       	out	0x33, r24	; 51
 60c:	83 b7       	in	r24, 0x33	; 51
 60e:	8d 7f       	andi	r24, 0xFD	; 253
 610:	83 bf       	out	0x33, r24	; 51
 612:	83 b7       	in	r24, 0x33	; 51
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	83 bf       	out	0x33, r24	; 51
 618:	45 c0       	rjmp	.+138    	; 0x6a4 <TIMER0_Init+0xfa>
 61a:	83 b7       	in	r24, 0x33	; 51
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	83 bf       	out	0x33, r24	; 51
 620:	83 b7       	in	r24, 0x33	; 51
 622:	8d 7f       	andi	r24, 0xFD	; 253
 624:	83 bf       	out	0x33, r24	; 51
 626:	83 b7       	in	r24, 0x33	; 51
 628:	8b 7f       	andi	r24, 0xFB	; 251
 62a:	83 bf       	out	0x33, r24	; 51
 62c:	3b c0       	rjmp	.+118    	; 0x6a4 <TIMER0_Init+0xfa>
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	83 bf       	out	0x33, r24	; 51
 634:	83 b7       	in	r24, 0x33	; 51
 636:	82 60       	ori	r24, 0x02	; 2
 638:	83 bf       	out	0x33, r24	; 51
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	8b 7f       	andi	r24, 0xFB	; 251
 63e:	83 bf       	out	0x33, r24	; 51
 640:	31 c0       	rjmp	.+98     	; 0x6a4 <TIMER0_Init+0xfa>
 642:	83 b7       	in	r24, 0x33	; 51
 644:	81 60       	ori	r24, 0x01	; 1
 646:	83 bf       	out	0x33, r24	; 51
 648:	83 b7       	in	r24, 0x33	; 51
 64a:	82 60       	ori	r24, 0x02	; 2
 64c:	83 bf       	out	0x33, r24	; 51
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	8b 7f       	andi	r24, 0xFB	; 251
 652:	83 bf       	out	0x33, r24	; 51
 654:	27 c0       	rjmp	.+78     	; 0x6a4 <TIMER0_Init+0xfa>
 656:	83 b7       	in	r24, 0x33	; 51
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	83 bf       	out	0x33, r24	; 51
 65c:	83 b7       	in	r24, 0x33	; 51
 65e:	8d 7f       	andi	r24, 0xFD	; 253
 660:	83 bf       	out	0x33, r24	; 51
 662:	83 b7       	in	r24, 0x33	; 51
 664:	84 60       	ori	r24, 0x04	; 4
 666:	83 bf       	out	0x33, r24	; 51
 668:	1d c0       	rjmp	.+58     	; 0x6a4 <TIMER0_Init+0xfa>
 66a:	83 b7       	in	r24, 0x33	; 51
 66c:	81 60       	ori	r24, 0x01	; 1
 66e:	83 bf       	out	0x33, r24	; 51
 670:	83 b7       	in	r24, 0x33	; 51
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	83 bf       	out	0x33, r24	; 51
 676:	83 b7       	in	r24, 0x33	; 51
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	13 c0       	rjmp	.+38     	; 0x6a4 <TIMER0_Init+0xfa>
 67e:	83 b7       	in	r24, 0x33	; 51
 680:	8e 7f       	andi	r24, 0xFE	; 254
 682:	83 bf       	out	0x33, r24	; 51
 684:	83 b7       	in	r24, 0x33	; 51
 686:	82 60       	ori	r24, 0x02	; 2
 688:	83 bf       	out	0x33, r24	; 51
 68a:	83 b7       	in	r24, 0x33	; 51
 68c:	84 60       	ori	r24, 0x04	; 4
 68e:	83 bf       	out	0x33, r24	; 51
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <TIMER0_Init+0xfa>
 692:	83 b7       	in	r24, 0x33	; 51
 694:	81 60       	ori	r24, 0x01	; 1
 696:	83 bf       	out	0x33, r24	; 51
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	83 bf       	out	0x33, r24	; 51
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	83 bf       	out	0x33, r24	; 51
 6a4:	41 30       	cpi	r20, 0x01	; 1
 6a6:	69 f0       	breq	.+26     	; 0x6c2 <TIMER0_Init+0x118>
 6a8:	28 f0       	brcs	.+10     	; 0x6b4 <TIMER0_Init+0x10a>
 6aa:	42 30       	cpi	r20, 0x02	; 2
 6ac:	c1 f0       	breq	.+48     	; 0x6de <TIMER0_Init+0x134>
 6ae:	43 30       	cpi	r20, 0x03	; 3
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <TIMER0_Init+0x126>
 6b2:	08 95       	ret
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	8f 7e       	andi	r24, 0xEF	; 239
 6b8:	83 bf       	out	0x33, r24	; 51
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	8f 7d       	andi	r24, 0xDF	; 223
 6be:	83 bf       	out	0x33, r24	; 51
 6c0:	08 95       	ret
 6c2:	83 b7       	in	r24, 0x33	; 51
 6c4:	80 61       	ori	r24, 0x10	; 16
 6c6:	83 bf       	out	0x33, r24	; 51
 6c8:	83 b7       	in	r24, 0x33	; 51
 6ca:	8f 7d       	andi	r24, 0xDF	; 223
 6cc:	83 bf       	out	0x33, r24	; 51
 6ce:	08 95       	ret
 6d0:	83 b7       	in	r24, 0x33	; 51
 6d2:	8f 7e       	andi	r24, 0xEF	; 239
 6d4:	83 bf       	out	0x33, r24	; 51
 6d6:	83 b7       	in	r24, 0x33	; 51
 6d8:	80 62       	ori	r24, 0x20	; 32
 6da:	83 bf       	out	0x33, r24	; 51
 6dc:	08 95       	ret
 6de:	83 b7       	in	r24, 0x33	; 51
 6e0:	80 61       	ori	r24, 0x10	; 16
 6e2:	83 bf       	out	0x33, r24	; 51
 6e4:	83 b7       	in	r24, 0x33	; 51
 6e6:	80 62       	ori	r24, 0x20	; 32
 6e8:	83 bf       	out	0x33, r24	; 51
 6ea:	08 95       	ret

000006ec <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
 70e:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <Timer0_OVF_Fptr>
 712:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <Timer0_OVF_Fptr+0x1>
 716:	30 97       	sbiw	r30, 0x00	; 0
 718:	09 f0       	breq	.+2      	; 0x71c <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
 71a:	09 95       	icall
		}
	}
 71c:	ff 91       	pop	r31
 71e:	ef 91       	pop	r30
 720:	bf 91       	pop	r27
 722:	af 91       	pop	r26
 724:	9f 91       	pop	r25
 726:	8f 91       	pop	r24
 728:	7f 91       	pop	r23
 72a:	6f 91       	pop	r22
 72c:	5f 91       	pop	r21
 72e:	4f 91       	pop	r20
 730:	3f 91       	pop	r19
 732:	2f 91       	pop	r18
 734:	0f 90       	pop	r0
 736:	0f be       	out	0x3f, r0	; 63
 738:	0f 90       	pop	r0
 73a:	1f 90       	pop	r1
 73c:	18 95       	reti

0000073e <__vector_10>:

	ISR(TIMER0_COMP_vect){
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
		Timer0_OC0_Fptr();
 760:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <Timer0_OC0_Fptr>
 764:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <Timer0_OC0_Fptr+0x1>
 768:	09 95       	icall
	}
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	0f 90       	pop	r0
 784:	0f be       	out	0x3f, r0	; 63
 786:	0f 90       	pop	r0
 788:	1f 90       	pop	r1
 78a:	18 95       	reti

0000078c <Timer1_Init>:
	
	pf_OC=pf;
	C_set=(1000000*time)/1000;
	OCR1A=1000;
	Timer1_OCA_SetCallBack(fun_oc1);
	Timer1_OCA_InterruptEnable();
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	29 f1       	breq	.+74     	; 0x7da <Timer1_Init+0x4e>
 790:	28 f4       	brcc	.+10     	; 0x79c <Timer1_Init+0x10>
 792:	88 23       	and	r24, r24
 794:	41 f0       	breq	.+16     	; 0x7a6 <Timer1_Init+0x1a>
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	99 f0       	breq	.+38     	; 0x7c0 <Timer1_Init+0x34>
 79a:	45 c0       	rjmp	.+138    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 79c:	83 30       	cpi	r24, 0x03	; 3
 79e:	51 f1       	breq	.+84     	; 0x7f4 <Timer1_Init+0x68>
 7a0:	84 30       	cpi	r24, 0x04	; 4
 7a2:	a9 f1       	breq	.+106    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7a4:	40 c0       	rjmp	.+128    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7a6:	8f b5       	in	r24, 0x2f	; 47
 7a8:	8e 7f       	andi	r24, 0xFE	; 254
 7aa:	8f bd       	out	0x2f, r24	; 47
 7ac:	8f b5       	in	r24, 0x2f	; 47
 7ae:	8d 7f       	andi	r24, 0xFD	; 253
 7b0:	8f bd       	out	0x2f, r24	; 47
 7b2:	8e b5       	in	r24, 0x2e	; 46
 7b4:	87 7f       	andi	r24, 0xF7	; 247
 7b6:	8e bd       	out	0x2e, r24	; 46
 7b8:	8e b5       	in	r24, 0x2e	; 46
 7ba:	8f 7e       	andi	r24, 0xEF	; 239
 7bc:	8e bd       	out	0x2e, r24	; 46
 7be:	33 c0       	rjmp	.+102    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7c0:	8f b5       	in	r24, 0x2f	; 47
 7c2:	8e 7f       	andi	r24, 0xFE	; 254
 7c4:	8f bd       	out	0x2f, r24	; 47
 7c6:	8f b5       	in	r24, 0x2f	; 47
 7c8:	8d 7f       	andi	r24, 0xFD	; 253
 7ca:	8f bd       	out	0x2f, r24	; 47
 7cc:	8e b5       	in	r24, 0x2e	; 46
 7ce:	88 60       	ori	r24, 0x08	; 8
 7d0:	8e bd       	out	0x2e, r24	; 46
 7d2:	8e b5       	in	r24, 0x2e	; 46
 7d4:	80 61       	ori	r24, 0x10	; 16
 7d6:	8e bd       	out	0x2e, r24	; 46
 7d8:	26 c0       	rjmp	.+76     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7da:	8f b5       	in	r24, 0x2f	; 47
 7dc:	8e 7f       	andi	r24, 0xFE	; 254
 7de:	8f bd       	out	0x2f, r24	; 47
 7e0:	8f b5       	in	r24, 0x2f	; 47
 7e2:	8d 7f       	andi	r24, 0xFD	; 253
 7e4:	8f bd       	out	0x2f, r24	; 47
 7e6:	8e b5       	in	r24, 0x2e	; 46
 7e8:	88 60       	ori	r24, 0x08	; 8
 7ea:	8e bd       	out	0x2e, r24	; 46
 7ec:	8e b5       	in	r24, 0x2e	; 46
 7ee:	8f 7e       	andi	r24, 0xEF	; 239
 7f0:	8e bd       	out	0x2e, r24	; 46
 7f2:	19 c0       	rjmp	.+50     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f4:	8f b5       	in	r24, 0x2f	; 47
 7f6:	8e 7f       	andi	r24, 0xFE	; 254
 7f8:	8f bd       	out	0x2f, r24	; 47
 7fa:	8f b5       	in	r24, 0x2f	; 47
 7fc:	82 60       	ori	r24, 0x02	; 2
 7fe:	8f bd       	out	0x2f, r24	; 47
 800:	8e b5       	in	r24, 0x2e	; 46
 802:	88 60       	ori	r24, 0x08	; 8
 804:	8e bd       	out	0x2e, r24	; 46
 806:	8e b5       	in	r24, 0x2e	; 46
 808:	80 61       	ori	r24, 0x10	; 16
 80a:	8e bd       	out	0x2e, r24	; 46
 80c:	0c c0       	rjmp	.+24     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 80e:	8f b5       	in	r24, 0x2f	; 47
 810:	81 60       	ori	r24, 0x01	; 1
 812:	8f bd       	out	0x2f, r24	; 47
 814:	8f b5       	in	r24, 0x2f	; 47
 816:	82 60       	ori	r24, 0x02	; 2
 818:	8f bd       	out	0x2f, r24	; 47
 81a:	8e b5       	in	r24, 0x2e	; 46
 81c:	88 60       	ori	r24, 0x08	; 8
 81e:	8e bd       	out	0x2e, r24	; 46
 820:	8e b5       	in	r24, 0x2e	; 46
 822:	80 61       	ori	r24, 0x10	; 16
 824:	8e bd       	out	0x2e, r24	; 46
 826:	86 2f       	mov	r24, r22
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 30       	cpi	r24, 0x08	; 8
 82c:	91 05       	cpc	r25, r1
 82e:	08 f0       	brcs	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 830:	54 c0       	rjmp	.+168    	; 0x8da <__stack+0x7b>
 832:	fc 01       	movw	r30, r24
 834:	ee 5c       	subi	r30, 0xCE	; 206
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	0c 94 56 06 	jmp	0xcac	; 0xcac <__tablejump2__>
 83c:	8e b5       	in	r24, 0x2e	; 46
 83e:	8e 7f       	andi	r24, 0xFE	; 254
 840:	8e bd       	out	0x2e, r24	; 46
 842:	8e b5       	in	r24, 0x2e	; 46
 844:	8d 7f       	andi	r24, 0xFD	; 253
 846:	8e bd       	out	0x2e, r24	; 46
 848:	8e b5       	in	r24, 0x2e	; 46
 84a:	8b 7f       	andi	r24, 0xFB	; 251
 84c:	8e bd       	out	0x2e, r24	; 46
 84e:	45 c0       	rjmp	.+138    	; 0x8da <__stack+0x7b>
 850:	8e b5       	in	r24, 0x2e	; 46
 852:	81 60       	ori	r24, 0x01	; 1
 854:	8e bd       	out	0x2e, r24	; 46
 856:	8e b5       	in	r24, 0x2e	; 46
 858:	8d 7f       	andi	r24, 0xFD	; 253
 85a:	8e bd       	out	0x2e, r24	; 46
 85c:	8e b5       	in	r24, 0x2e	; 46
 85e:	8b 7f       	andi	r24, 0xFB	; 251
 860:	8e bd       	out	0x2e, r24	; 46
 862:	3b c0       	rjmp	.+118    	; 0x8da <__stack+0x7b>
 864:	8e b5       	in	r24, 0x2e	; 46
 866:	8e 7f       	andi	r24, 0xFE	; 254
 868:	8e bd       	out	0x2e, r24	; 46
 86a:	8e b5       	in	r24, 0x2e	; 46
 86c:	82 60       	ori	r24, 0x02	; 2
 86e:	8e bd       	out	0x2e, r24	; 46
 870:	8e b5       	in	r24, 0x2e	; 46
 872:	8b 7f       	andi	r24, 0xFB	; 251
 874:	8e bd       	out	0x2e, r24	; 46
 876:	31 c0       	rjmp	.+98     	; 0x8da <__stack+0x7b>
 878:	8e b5       	in	r24, 0x2e	; 46
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	8e bd       	out	0x2e, r24	; 46
 87e:	8e b5       	in	r24, 0x2e	; 46
 880:	82 60       	ori	r24, 0x02	; 2
 882:	8e bd       	out	0x2e, r24	; 46
 884:	8e b5       	in	r24, 0x2e	; 46
 886:	8b 7f       	andi	r24, 0xFB	; 251
 888:	8e bd       	out	0x2e, r24	; 46
 88a:	27 c0       	rjmp	.+78     	; 0x8da <__stack+0x7b>
 88c:	8e b5       	in	r24, 0x2e	; 46
 88e:	8e 7f       	andi	r24, 0xFE	; 254
 890:	8e bd       	out	0x2e, r24	; 46
 892:	8e b5       	in	r24, 0x2e	; 46
 894:	8d 7f       	andi	r24, 0xFD	; 253
 896:	8e bd       	out	0x2e, r24	; 46
 898:	8e b5       	in	r24, 0x2e	; 46
 89a:	84 60       	ori	r24, 0x04	; 4
 89c:	8e bd       	out	0x2e, r24	; 46
 89e:	1d c0       	rjmp	.+58     	; 0x8da <__stack+0x7b>
 8a0:	8f b5       	in	r24, 0x2f	; 47
 8a2:	81 60       	ori	r24, 0x01	; 1
 8a4:	8f bd       	out	0x2f, r24	; 47
 8a6:	8f b5       	in	r24, 0x2f	; 47
 8a8:	8d 7f       	andi	r24, 0xFD	; 253
 8aa:	8f bd       	out	0x2f, r24	; 47
 8ac:	8f b5       	in	r24, 0x2f	; 47
 8ae:	84 60       	ori	r24, 0x04	; 4
 8b0:	8f bd       	out	0x2f, r24	; 47
 8b2:	13 c0       	rjmp	.+38     	; 0x8da <__stack+0x7b>
 8b4:	8e b5       	in	r24, 0x2e	; 46
 8b6:	8e 7f       	andi	r24, 0xFE	; 254
 8b8:	8e bd       	out	0x2e, r24	; 46
 8ba:	8e b5       	in	r24, 0x2e	; 46
 8bc:	82 60       	ori	r24, 0x02	; 2
 8be:	8e bd       	out	0x2e, r24	; 46
 8c0:	8e b5       	in	r24, 0x2e	; 46
 8c2:	84 60       	ori	r24, 0x04	; 4
 8c4:	8e bd       	out	0x2e, r24	; 46
 8c6:	09 c0       	rjmp	.+18     	; 0x8da <__stack+0x7b>
 8c8:	8e b5       	in	r24, 0x2e	; 46
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	8e bd       	out	0x2e, r24	; 46
 8ce:	8e b5       	in	r24, 0x2e	; 46
 8d0:	82 60       	ori	r24, 0x02	; 2
 8d2:	8e bd       	out	0x2e, r24	; 46
 8d4:	8e b5       	in	r24, 0x2e	; 46
 8d6:	84 60       	ori	r24, 0x04	; 4
 8d8:	8e bd       	out	0x2e, r24	; 46
 8da:	41 30       	cpi	r20, 0x01	; 1
 8dc:	69 f0       	breq	.+26     	; 0x8f8 <__stack+0x99>
 8de:	28 f0       	brcs	.+10     	; 0x8ea <__stack+0x8b>
 8e0:	42 30       	cpi	r20, 0x02	; 2
 8e2:	89 f0       	breq	.+34     	; 0x906 <__stack+0xa7>
 8e4:	43 30       	cpi	r20, 0x03	; 3
 8e6:	b1 f0       	breq	.+44     	; 0x914 <__stack+0xb5>
 8e8:	1b c0       	rjmp	.+54     	; 0x920 <__stack+0xc1>
 8ea:	8f b5       	in	r24, 0x2f	; 47
 8ec:	8f 7b       	andi	r24, 0xBF	; 191
 8ee:	8f bd       	out	0x2f, r24	; 47
 8f0:	8f b5       	in	r24, 0x2f	; 47
 8f2:	8f 77       	andi	r24, 0x7F	; 127
 8f4:	8f bd       	out	0x2f, r24	; 47
 8f6:	14 c0       	rjmp	.+40     	; 0x920 <__stack+0xc1>
 8f8:	8f b5       	in	r24, 0x2f	; 47
 8fa:	80 64       	ori	r24, 0x40	; 64
 8fc:	8f bd       	out	0x2f, r24	; 47
 8fe:	8f b5       	in	r24, 0x2f	; 47
 900:	8f 77       	andi	r24, 0x7F	; 127
 902:	8f bd       	out	0x2f, r24	; 47
 904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0xc1>
 906:	8f b5       	in	r24, 0x2f	; 47
 908:	8f 7b       	andi	r24, 0xBF	; 191
 90a:	8f bd       	out	0x2f, r24	; 47
 90c:	8f b5       	in	r24, 0x2f	; 47
 90e:	80 68       	ori	r24, 0x80	; 128
 910:	8f bd       	out	0x2f, r24	; 47
 912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0xc1>
 914:	8f b5       	in	r24, 0x2f	; 47
 916:	80 64       	ori	r24, 0x40	; 64
 918:	8f bd       	out	0x2f, r24	; 47
 91a:	8f b5       	in	r24, 0x2f	; 47
 91c:	80 68       	ori	r24, 0x80	; 128
 91e:	8f bd       	out	0x2f, r24	; 47
 920:	21 30       	cpi	r18, 0x01	; 1
 922:	69 f0       	breq	.+26     	; 0x93e <__stack+0xdf>
 924:	28 f0       	brcs	.+10     	; 0x930 <__stack+0xd1>
 926:	22 30       	cpi	r18, 0x02	; 2
 928:	89 f0       	breq	.+34     	; 0x94c <__stack+0xed>
 92a:	23 30       	cpi	r18, 0x03	; 3
 92c:	b1 f0       	breq	.+44     	; 0x95a <__stack+0xfb>
 92e:	08 95       	ret
 930:	8f b5       	in	r24, 0x2f	; 47
 932:	8f 7e       	andi	r24, 0xEF	; 239
 934:	8f bd       	out	0x2f, r24	; 47
 936:	8f b5       	in	r24, 0x2f	; 47
 938:	8f 7d       	andi	r24, 0xDF	; 223
 93a:	8f bd       	out	0x2f, r24	; 47
 93c:	08 95       	ret
 93e:	8f b5       	in	r24, 0x2f	; 47
 940:	80 61       	ori	r24, 0x10	; 16
 942:	8f bd       	out	0x2f, r24	; 47
 944:	8f b5       	in	r24, 0x2f	; 47
 946:	8f 7d       	andi	r24, 0xDF	; 223
 948:	8f bd       	out	0x2f, r24	; 47
 94a:	08 95       	ret
 94c:	8f b5       	in	r24, 0x2f	; 47
 94e:	8f 7e       	andi	r24, 0xEF	; 239
 950:	8f bd       	out	0x2f, r24	; 47
 952:	8f b5       	in	r24, 0x2f	; 47
 954:	80 62       	ori	r24, 0x20	; 32
 956:	8f bd       	out	0x2f, r24	; 47
 958:	08 95       	ret
 95a:	8f b5       	in	r24, 0x2f	; 47
 95c:	80 61       	ori	r24, 0x10	; 16
 95e:	8f bd       	out	0x2f, r24	; 47
 960:	8f b5       	in	r24, 0x2f	; 47
 962:	80 62       	ori	r24, 0x20	; 32
 964:	8f bd       	out	0x2f, r24	; 47
 966:	08 95       	ret

00000968 <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
	Timer1_OVF_Fptr();
 98a:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Timer1_OVF_Fptr>
 98e:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Timer1_OVF_Fptr+0x1>
 992:	09 95       	icall
}
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	2f 93       	push	r18
 9c2:	3f 93       	push	r19
 9c4:	4f 93       	push	r20
 9c6:	5f 93       	push	r21
 9c8:	6f 93       	push	r22
 9ca:	7f 93       	push	r23
 9cc:	8f 93       	push	r24
 9ce:	9f 93       	push	r25
 9d0:	af 93       	push	r26
 9d2:	bf 93       	push	r27
 9d4:	ef 93       	push	r30
 9d6:	ff 93       	push	r31
	Timer1_OCA_Fptr();
 9d8:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Timer1_OCA_Fptr>
 9dc:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Timer1_OCA_Fptr+0x1>
 9e0:	09 95       	icall
}
 9e2:	ff 91       	pop	r31
 9e4:	ef 91       	pop	r30
 9e6:	bf 91       	pop	r27
 9e8:	af 91       	pop	r26
 9ea:	9f 91       	pop	r25
 9ec:	8f 91       	pop	r24
 9ee:	7f 91       	pop	r23
 9f0:	6f 91       	pop	r22
 9f2:	5f 91       	pop	r21
 9f4:	4f 91       	pop	r20
 9f6:	3f 91       	pop	r19
 9f8:	2f 91       	pop	r18
 9fa:	0f 90       	pop	r0
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	0f 90       	pop	r0
 a00:	1f 90       	pop	r1
 a02:	18 95       	reti

00000a04 <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 a04:	1f 92       	push	r1
 a06:	0f 92       	push	r0
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	0f 92       	push	r0
 a0c:	11 24       	eor	r1, r1
 a0e:	2f 93       	push	r18
 a10:	3f 93       	push	r19
 a12:	4f 93       	push	r20
 a14:	5f 93       	push	r21
 a16:	6f 93       	push	r22
 a18:	7f 93       	push	r23
 a1a:	8f 93       	push	r24
 a1c:	9f 93       	push	r25
 a1e:	af 93       	push	r26
 a20:	bf 93       	push	r27
 a22:	ef 93       	push	r30
 a24:	ff 93       	push	r31
	Timer1_OCB_Fptr();
 a26:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Timer1_OCB_Fptr>
 a2a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Timer1_OCB_Fptr+0x1>
 a2e:	09 95       	icall
}
 a30:	ff 91       	pop	r31
 a32:	ef 91       	pop	r30
 a34:	bf 91       	pop	r27
 a36:	af 91       	pop	r26
 a38:	9f 91       	pop	r25
 a3a:	8f 91       	pop	r24
 a3c:	7f 91       	pop	r23
 a3e:	6f 91       	pop	r22
 a40:	5f 91       	pop	r21
 a42:	4f 91       	pop	r20
 a44:	3f 91       	pop	r19
 a46:	2f 91       	pop	r18
 a48:	0f 90       	pop	r0
 a4a:	0f be       	out	0x3f, r0	; 63
 a4c:	0f 90       	pop	r0
 a4e:	1f 90       	pop	r1
 a50:	18 95       	reti

00000a52 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 a52:	1f 92       	push	r1
 a54:	0f 92       	push	r0
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	0f 92       	push	r0
 a5a:	11 24       	eor	r1, r1
 a5c:	2f 93       	push	r18
 a5e:	3f 93       	push	r19
 a60:	4f 93       	push	r20
 a62:	5f 93       	push	r21
 a64:	6f 93       	push	r22
 a66:	7f 93       	push	r23
 a68:	8f 93       	push	r24
 a6a:	9f 93       	push	r25
 a6c:	af 93       	push	r26
 a6e:	bf 93       	push	r27
 a70:	ef 93       	push	r30
 a72:	ff 93       	push	r31
	Timer1_ICU_Fptr();
 a74:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Timer1_ICU_Fptr>
 a78:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Timer1_ICU_Fptr+0x1>
 a7c:	09 95       	icall
}
 a7e:	ff 91       	pop	r31
 a80:	ef 91       	pop	r30
 a82:	bf 91       	pop	r27
 a84:	af 91       	pop	r26
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	7f 91       	pop	r23
 a8c:	6f 91       	pop	r22
 a8e:	5f 91       	pop	r21
 a90:	4f 91       	pop	r20
 a92:	3f 91       	pop	r19
 a94:	2f 91       	pop	r18
 a96:	0f 90       	pop	r0
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	0f 90       	pop	r0
 a9c:	1f 90       	pop	r1
 a9e:	18 95       	reti

00000aa0 <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
 aa0:	1f 92       	push	r1
 aa2:	0f 92       	push	r0
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	0f 92       	push	r0
 aa8:	11 24       	eor	r1, r1
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
 ac2:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Timer2_OVF_Fptr>
 ac6:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Timer2_OVF_Fptr+0x1>
 aca:	30 97       	sbiw	r30, 0x00	; 0
 acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
 ace:	09 95       	icall
		}
	}
 ad0:	ff 91       	pop	r31
 ad2:	ef 91       	pop	r30
 ad4:	bf 91       	pop	r27
 ad6:	af 91       	pop	r26
 ad8:	9f 91       	pop	r25
 ada:	8f 91       	pop	r24
 adc:	7f 91       	pop	r23
 ade:	6f 91       	pop	r22
 ae0:	5f 91       	pop	r21
 ae2:	4f 91       	pop	r20
 ae4:	3f 91       	pop	r19
 ae6:	2f 91       	pop	r18
 ae8:	0f 90       	pop	r0
 aea:	0f be       	out	0x3f, r0	; 63
 aec:	0f 90       	pop	r0
 aee:	1f 90       	pop	r1
 af0:	18 95       	reti

00000af2 <__vector_4>:

	ISR(TIMER2_COMP_vect){
 af2:	1f 92       	push	r1
 af4:	0f 92       	push	r0
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	0f 92       	push	r0
 afa:	11 24       	eor	r1, r1
 afc:	2f 93       	push	r18
 afe:	3f 93       	push	r19
 b00:	4f 93       	push	r20
 b02:	5f 93       	push	r21
 b04:	6f 93       	push	r22
 b06:	7f 93       	push	r23
 b08:	8f 93       	push	r24
 b0a:	9f 93       	push	r25
 b0c:	af 93       	push	r26
 b0e:	bf 93       	push	r27
 b10:	ef 93       	push	r30
 b12:	ff 93       	push	r31
		Timer2_OC2_Fptr();
 b14:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Timer2_OC2_Fptr>
 b18:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Timer2_OC2_Fptr+0x1>
 b1c:	09 95       	icall
	}
 b1e:	ff 91       	pop	r31
 b20:	ef 91       	pop	r30
 b22:	bf 91       	pop	r27
 b24:	af 91       	pop	r26
 b26:	9f 91       	pop	r25
 b28:	8f 91       	pop	r24
 b2a:	7f 91       	pop	r23
 b2c:	6f 91       	pop	r22
 b2e:	5f 91       	pop	r21
 b30:	4f 91       	pop	r20
 b32:	3f 91       	pop	r19
 b34:	2f 91       	pop	r18
 b36:	0f 90       	pop	r0
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	0f 90       	pop	r0
 b3c:	1f 90       	pop	r1
 b3e:	18 95       	reti

00000b40 <uart_init>:
	else
	{
		return 0;
	}
	
}
 b40:	82 30       	cpi	r24, 0x02	; 2
 b42:	f9 f0       	breq	.+62     	; 0xb82 <uart_init+0x42>
 b44:	28 f4       	brcc	.+10     	; 0xb50 <uart_init+0x10>
 b46:	88 23       	and	r24, r24
 b48:	41 f0       	breq	.+16     	; 0xb5a <uart_init+0x1a>
 b4a:	81 30       	cpi	r24, 0x01	; 1
 b4c:	81 f0       	breq	.+32     	; 0xb6e <uart_init+0x2e>
 b4e:	36 c0       	rjmp	.+108    	; 0xbbc <uart_init+0x7c>
 b50:	83 30       	cpi	r24, 0x03	; 3
 b52:	09 f1       	breq	.+66     	; 0xb96 <uart_init+0x56>
 b54:	84 30       	cpi	r24, 0x04	; 4
 b56:	49 f1       	breq	.+82     	; 0xbaa <uart_init+0x6a>
 b58:	31 c0       	rjmp	.+98     	; 0xbbc <uart_init+0x7c>
 b5a:	80 b5       	in	r24, 0x20	; 32
 b5c:	8d 7f       	andi	r24, 0xFD	; 253
 b5e:	80 bd       	out	0x20, r24	; 32
 b60:	80 b5       	in	r24, 0x20	; 32
 b62:	8b 7f       	andi	r24, 0xFB	; 251
 b64:	80 bd       	out	0x20, r24	; 32
 b66:	8a b1       	in	r24, 0x0a	; 10
 b68:	8b 7f       	andi	r24, 0xFB	; 251
 b6a:	8a b9       	out	0x0a, r24	; 10
 b6c:	27 c0       	rjmp	.+78     	; 0xbbc <uart_init+0x7c>
 b6e:	80 b5       	in	r24, 0x20	; 32
 b70:	82 60       	ori	r24, 0x02	; 2
 b72:	80 bd       	out	0x20, r24	; 32
 b74:	80 b5       	in	r24, 0x20	; 32
 b76:	8b 7f       	andi	r24, 0xFB	; 251
 b78:	80 bd       	out	0x20, r24	; 32
 b7a:	8a b1       	in	r24, 0x0a	; 10
 b7c:	8b 7f       	andi	r24, 0xFB	; 251
 b7e:	8a b9       	out	0x0a, r24	; 10
 b80:	1d c0       	rjmp	.+58     	; 0xbbc <uart_init+0x7c>
 b82:	80 b5       	in	r24, 0x20	; 32
 b84:	8d 7f       	andi	r24, 0xFD	; 253
 b86:	80 bd       	out	0x20, r24	; 32
 b88:	80 b5       	in	r24, 0x20	; 32
 b8a:	84 60       	ori	r24, 0x04	; 4
 b8c:	80 bd       	out	0x20, r24	; 32
 b8e:	8a b1       	in	r24, 0x0a	; 10
 b90:	8b 7f       	andi	r24, 0xFB	; 251
 b92:	8a b9       	out	0x0a, r24	; 10
 b94:	13 c0       	rjmp	.+38     	; 0xbbc <uart_init+0x7c>
 b96:	80 b5       	in	r24, 0x20	; 32
 b98:	82 60       	ori	r24, 0x02	; 2
 b9a:	80 bd       	out	0x20, r24	; 32
 b9c:	80 b5       	in	r24, 0x20	; 32
 b9e:	84 60       	ori	r24, 0x04	; 4
 ba0:	80 bd       	out	0x20, r24	; 32
 ba2:	8a b1       	in	r24, 0x0a	; 10
 ba4:	8b 7f       	andi	r24, 0xFB	; 251
 ba6:	8a b9       	out	0x0a, r24	; 10
 ba8:	09 c0       	rjmp	.+18     	; 0xbbc <uart_init+0x7c>
 baa:	80 b5       	in	r24, 0x20	; 32
 bac:	82 60       	ori	r24, 0x02	; 2
 bae:	80 bd       	out	0x20, r24	; 32
 bb0:	80 b5       	in	r24, 0x20	; 32
 bb2:	84 60       	ori	r24, 0x04	; 4
 bb4:	80 bd       	out	0x20, r24	; 32
 bb6:	8a b1       	in	r24, 0x0a	; 10
 bb8:	84 60       	ori	r24, 0x04	; 4
 bba:	8a b9       	out	0x0a, r24	; 10
 bbc:	66 23       	and	r22, r22
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <uart_init+0x86>
 bc0:	61 30       	cpi	r22, 0x01	; 1
 bc2:	29 f0       	breq	.+10     	; 0xbce <uart_init+0x8e>
 bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <uart_init+0x94>
 bc6:	80 b5       	in	r24, 0x20	; 32
 bc8:	87 7f       	andi	r24, 0xF7	; 247
 bca:	80 bd       	out	0x20, r24	; 32
 bcc:	03 c0       	rjmp	.+6      	; 0xbd4 <uart_init+0x94>
 bce:	80 b5       	in	r24, 0x20	; 32
 bd0:	88 60       	ori	r24, 0x08	; 8
 bd2:	80 bd       	out	0x20, r24	; 32
 bd4:	41 30       	cpi	r20, 0x01	; 1
 bd6:	59 f0       	breq	.+22     	; 0xbee <uart_init+0xae>
 bd8:	18 f0       	brcs	.+6      	; 0xbe0 <uart_init+0xa0>
 bda:	42 30       	cpi	r20, 0x02	; 2
 bdc:	79 f0       	breq	.+30     	; 0xbfc <uart_init+0xbc>
 bde:	14 c0       	rjmp	.+40     	; 0xc08 <uart_init+0xc8>
 be0:	80 b5       	in	r24, 0x20	; 32
 be2:	8f 7e       	andi	r24, 0xEF	; 239
 be4:	80 bd       	out	0x20, r24	; 32
 be6:	80 b5       	in	r24, 0x20	; 32
 be8:	8f 7d       	andi	r24, 0xDF	; 223
 bea:	80 bd       	out	0x20, r24	; 32
 bec:	0d c0       	rjmp	.+26     	; 0xc08 <uart_init+0xc8>
 bee:	80 b5       	in	r24, 0x20	; 32
 bf0:	8f 7e       	andi	r24, 0xEF	; 239
 bf2:	80 bd       	out	0x20, r24	; 32
 bf4:	80 b5       	in	r24, 0x20	; 32
 bf6:	80 62       	ori	r24, 0x20	; 32
 bf8:	80 bd       	out	0x20, r24	; 32
 bfa:	06 c0       	rjmp	.+12     	; 0xc08 <uart_init+0xc8>
 bfc:	80 b5       	in	r24, 0x20	; 32
 bfe:	80 61       	ori	r24, 0x10	; 16
 c00:	80 bd       	out	0x20, r24	; 32
 c02:	80 b5       	in	r24, 0x20	; 32
 c04:	80 62       	ori	r24, 0x20	; 32
 c06:	80 bd       	out	0x20, r24	; 32
 c08:	22 23       	and	r18, r18
 c0a:	19 f0       	breq	.+6      	; 0xc12 <uart_init+0xd2>
 c0c:	21 30       	cpi	r18, 0x01	; 1
 c0e:	41 f0       	breq	.+16     	; 0xc20 <uart_init+0xe0>
 c10:	0a c0       	rjmp	.+20     	; 0xc26 <uart_init+0xe6>
 c12:	80 b5       	in	r24, 0x20	; 32
 c14:	8f 7b       	andi	r24, 0xBF	; 191
 c16:	80 bd       	out	0x20, r24	; 32
 c18:	8b b1       	in	r24, 0x0b	; 11
 c1a:	8d 7f       	andi	r24, 0xFD	; 253
 c1c:	8b b9       	out	0x0b, r24	; 11
 c1e:	03 c0       	rjmp	.+6      	; 0xc26 <uart_init+0xe6>
 c20:	80 b5       	in	r24, 0x20	; 32
 c22:	80 64       	ori	r24, 0x40	; 64
 c24:	80 bd       	out	0x20, r24	; 32
 c26:	83 e3       	ldi	r24, 0x33	; 51
 c28:	89 b9       	out	0x09, r24	; 9
 c2a:	8a b1       	in	r24, 0x0a	; 10
 c2c:	80 61       	ori	r24, 0x10	; 16
 c2e:	8a b9       	out	0x0a, r24	; 10
 c30:	8a b1       	in	r24, 0x0a	; 10
 c32:	88 60       	ori	r24, 0x08	; 8
 c34:	8a b9       	out	0x0a, r24	; 10
 c36:	08 95       	ret

00000c38 <uart_send_noblock>:

void uart_send_noblock(uint8_t c)
{
	UDR=c;
 c38:	8c b9       	out	0x0c, r24	; 12
 c3a:	08 95       	ret

00000c3c <__vector_15>:
{
		
}

ISR(USART_TXC_vect)
{
 c3c:	1f 92       	push	r1
 c3e:	0f 92       	push	r0
 c40:	0f b6       	in	r0, 0x3f	; 63
 c42:	0f 92       	push	r0
 c44:	11 24       	eor	r1, r1
 c46:	2f 93       	push	r18
 c48:	3f 93       	push	r19
 c4a:	4f 93       	push	r20
 c4c:	5f 93       	push	r21
 c4e:	6f 93       	push	r22
 c50:	7f 93       	push	r23
 c52:	8f 93       	push	r24
 c54:	9f 93       	push	r25
 c56:	af 93       	push	r26
 c58:	bf 93       	push	r27
 c5a:	ef 93       	push	r30
 c5c:	ff 93       	push	r31
	static uint8_t i=1;
	if (pdata[i]!=0)
 c5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c62:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <pdata>
 c66:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <pdata+0x1>
 c6a:	e8 0f       	add	r30, r24
 c6c:	f1 1d       	adc	r31, r1
 c6e:	80 81       	ld	r24, Z
 c70:	88 23       	and	r24, r24
 c72:	41 f0       	breq	.+16     	; 0xc84 <__vector_15+0x48>
	{
		uart_send_noblock(pdata[i]);
 c74:	0e 94 1c 06 	call	0xc38	; 0xc38 <uart_send_noblock>
		i++;
 c78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c7c:	8f 5f       	subi	r24, 0xFF	; 255
 c7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 c82:	03 c0       	rjmp	.+6      	; 0xc8a <__vector_15+0x4e>
	}
	else
	{
		i=1;	
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 c8a:	ff 91       	pop	r31
 c8c:	ef 91       	pop	r30
 c8e:	bf 91       	pop	r27
 c90:	af 91       	pop	r26
 c92:	9f 91       	pop	r25
 c94:	8f 91       	pop	r24
 c96:	7f 91       	pop	r23
 c98:	6f 91       	pop	r22
 c9a:	5f 91       	pop	r21
 c9c:	4f 91       	pop	r20
 c9e:	3f 91       	pop	r19
 ca0:	2f 91       	pop	r18
 ca2:	0f 90       	pop	r0
 ca4:	0f be       	out	0x3f, r0	; 63
 ca6:	0f 90       	pop	r0
 ca8:	1f 90       	pop	r1
 caa:	18 95       	reti

00000cac <__tablejump2__>:
 cac:	ee 0f       	add	r30, r30
 cae:	ff 1f       	adc	r31, r31
 cb0:	05 90       	lpm	r0, Z+
 cb2:	f4 91       	lpm	r31, Z
 cb4:	e0 2d       	mov	r30, r0
 cb6:	09 94       	ijmp

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>
