
GB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000f92  00001026  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008000ae  008000ae  00001074  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000377f  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135c  00000000  00000000  00004d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000243d  00000000  00000000  000060bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de4  00000000  00000000  000084f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011e2  00000000  00000000  000092dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c52  00000000  00000000  0000a4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_1>
   8:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <__vector_2>
   c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_3>
  10:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_4>
  14:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_5>
  18:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_6>
  1c:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_7>
  20:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_8>
  24:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_9>
  28:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_10>
  2c:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_11>
  30:	0c 94 aa 03 	jmp	0x754	; 0x754 <__vector_12>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_15>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	e9 04       	cpc	r14, r9
  56:	f3 04       	cpc	r15, r3
  58:	fd 04       	cpc	r15, r13
  5a:	07 05       	cpc	r16, r7
  5c:	11 05       	cpc	r17, r1
  5e:	1b 05       	cpc	r17, r11
  60:	25 05       	cpc	r18, r5
  62:	2f 05       	cpc	r18, r15

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e9       	ldi	r30, 0x92	; 146
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	ae ea       	ldi	r26, 0xAE	; 174
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 3d       	cpi	r26, 0xD2	; 210
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 14 02 	call	0x428	; 0x428 <main>
  9a:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Start>:

uint8_t flag=0;
uint8_t flag1=0;

void Start(void)
{
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	2a 97       	sbiw	r28, 0x0a	; 10
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
	uint8_t str[10];
	uart_recieve_string(str);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 05 07 	call	0xe0a	; 0xe0a <uart_recieve_string>
	// servo control
	if (strcmp(str,"Verified") && flag==0);
	{
		Servo_Angle(90);
  c0:	8a e5       	ldi	r24, 0x5A	; 90
  c2:	0e 94 03 02 	call	0x406	; 0x406 <Servo_Angle>
		LCD_Clear();
  c6:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Clear>
		LCD_GOTO(1,4);
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_GOTO>
		LCD_WriteString("Enter your Car ");
  d2:	81 e6       	ldi	r24, 0x61	; 97
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_WriteString>
		flag=1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <flag>
	}
	// ultrasonic sensor
	uint8_t x= US_read(ADC1);
  e0:	0e 94 03 07 	call	0xe06	; 0xe06 <US_read>
  e4:	18 2f       	mov	r17, r24
	if (x>10 && x<20 && flag1==0);
	{
		TIMER0_SetInterrupt_ms(1000,Buzzer_Tog);
  e6:	6d eb       	ldi	r22, 0xBD	; 189
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	0e 94 1f 04 	call	0x83e	; 0x83e <TIMER0_SetInterrupt_ms>
	}
	if (x<10 && flag1==0)
  f2:	1a 30       	cpi	r17, 0x0A	; 10
  f4:	a0 f4       	brcc	.+40     	; 0x11e <Start+0x7c>
  f6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <__data_end>
  fa:	81 11       	cpse	r24, r1
  fc:	10 c0       	rjmp	.+32     	; 0x11e <Start+0x7c>
	{
		TIMER0_SetInterrupt_ms(500,Buzzer_Tog);
  fe:	6d eb       	ldi	r22, 0xBD	; 189
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 1f 04 	call	0x83e	; 0x83e <TIMER0_SetInterrupt_ms>
		LCD_Clear();
 10a:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Clear>
		LCD_GOTO(1,4);
 10e:	64 e0       	ldi	r22, 0x04	; 4
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_GOTO>
		LCD_WriteString("Stop");
 116:	81 e7       	ldi	r24, 0x71	; 113
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_WriteString>
	}
	if (DIO_Readpin(start) == HIGH)
 11e:	89 e0       	ldi	r24, 0x09	; 9
 120:	0e 94 b2 02 	call	0x564	; 0x564 <DIO_Readpin>
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	21 f4       	brne	.+8      	; 0x130 <Start+0x8e>
	{
		flag1=1;
 128:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__data_end>
		Buzzer_off();
 12c:	0e 94 b8 00 	call	0x170	; 0x170 <Buzzer_off>
	}
	// Wireless Charging
	if (strcmp(str,"WC,on"))
 130:	66 e7       	ldi	r22, 0x76	; 118
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	0e 94 be 07 	call	0xf7c	; 0xf7c <strcmp>
 13c:	89 2b       	or	r24, r25
 13e:	71 f0       	breq	.+28     	; 0x15c <Start+0xba>
	{
		LCD_Clear();
 140:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Clear>
		LCD_GOTO(1,4);
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_GOTO>
		LCD_WriteString("Wireless Charging is activated");
 14c:	8c e7       	ldi	r24, 0x7C	; 124
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_WriteString>
		DIO_Writepin(Relay,HIGH);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
	}
 15c:	2a 96       	adiw	r28, 0x0a	; 10
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	08 95       	ret

00000170 <Buzzer_off>:
	DIO_Writepin(buzzer,HIGH);
}

void Buzzer_off()
{
	DIO_Writepin(buzzer,LOW);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 178:	08 95       	ret

0000017a <Buzzer_Tog>:
}

void Buzzer_Tog()
{
	DIO_Toggle(buzzer);
 17a:	8e e0       	ldi	r24, 0x0E	; 14
 17c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <DIO_Toggle>
 180:	08 95       	ret

00000182 <LCD_WriteCmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	84 fb       	bst	r24, 4
 188:	66 27       	eor	r22, r22
 18a:	60 f9       	bld	r22, 0
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 192:	c5 fb       	bst	r28, 5
 194:	66 27       	eor	r22, r22
 196:	60 f9       	bld	r22, 0
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 19e:	c6 fb       	bst	r28, 6
 1a0:	66 27       	eor	r22, r22
 1a2:	60 f9       	bld	r22, 0
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1aa:	6c 2f       	mov	r22, r28
 1ac:	66 1f       	adc	r22, r22
 1ae:	66 27       	eor	r22, r22
 1b0:	66 1f       	adc	r22, r22
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	89 e0       	ldi	r24, 0x09	; 9
 1c4:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1d0:	8f ec       	ldi	r24, 0xCF	; 207
 1d2:	97 e0       	ldi	r25, 0x07	; 7
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_WriteCmd+0x52>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_WriteCmd+0x58>
 1da:	00 00       	nop
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1e4:	6c 2f       	mov	r22, r28
 1e6:	61 70       	andi	r22, 0x01	; 1
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1ee:	c1 fb       	bst	r28, 1
 1f0:	66 27       	eor	r22, r22
 1f2:	60 f9       	bld	r22, 0
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 1fa:	c2 fb       	bst	r28, 2
 1fc:	66 27       	eor	r22, r22
 1fe:	60 f9       	bld	r22, 0
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 206:	c3 fb       	bst	r28, 3
 208:	66 27       	eor	r22, r22
 20a:	60 f9       	bld	r22, 0
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e0       	ldi	r24, 0x08	; 8
 216:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 22a:	8f ec       	ldi	r24, 0xCF	; 207
 22c:	97 e0       	ldi	r25, 0x07	; 7
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <LCD_WriteCmd+0xac>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_WriteCmd+0xb2>
 234:	00 00       	nop
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	97 e2       	ldi	r25, 0x27	; 39
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <LCD_WriteCmd+0xc0>
 246:	00 c0       	rjmp	.+0      	; 0x248 <LCD_WriteCmd+0xc6>
 248:	00 00       	nop
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_Init>:
 24e:	8f e3       	ldi	r24, 0x3F	; 63
 250:	9c e9       	ldi	r25, 0x9C	; 156
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCD_Init+0x4>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCD_Init+0xa>
 258:	00 00       	nop
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 260:	8f ec       	ldi	r24, 0xCF	; 207
 262:	97 e0       	ldi	r25, 0x07	; 7
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <LCD_Init+0x16>
 268:	00 c0       	rjmp	.+0      	; 0x26a <LCD_Init+0x1c>
 26a:	00 00       	nop
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Init+0x28>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Init+0x2e>
 27c:	00 00       	nop
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCD_Init+0x3a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <LCD_Init+0x40>
 28e:	00 00       	nop
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCD_Init+0x4c>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <LCD_Init+0x52>
 2a0:	00 00       	nop
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 2a8:	8f ec       	ldi	r24, 0xCF	; 207
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCD_Init+0x5e>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCD_Init+0x64>
 2b2:	00 00       	nop
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 2ba:	08 95       	ret

000002bc <LCD_WriteData>:
 2bc:	cf 93       	push	r28
 2be:	c8 2f       	mov	r28, r24
 2c0:	84 fb       	bst	r24, 4
 2c2:	66 27       	eor	r22, r22
 2c4:	60 f9       	bld	r22, 0
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 2cc:	c5 fb       	bst	r28, 5
 2ce:	66 27       	eor	r22, r22
 2d0:	60 f9       	bld	r22, 0
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 2d8:	c6 fb       	bst	r28, 6
 2da:	66 27       	eor	r22, r22
 2dc:	60 f9       	bld	r22, 0
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 2e4:	6c 2f       	mov	r22, r28
 2e6:	66 1f       	adc	r22, r22
 2e8:	66 27       	eor	r22, r22
 2ea:	66 1f       	adc	r22, r22
 2ec:	87 e0       	ldi	r24, 0x07	; 7
 2ee:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	89 e0       	ldi	r24, 0x09	; 9
 2fe:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8a e0       	ldi	r24, 0x0A	; 10
 306:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_WriteData+0x52>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_WriteData+0x58>
 314:	00 00       	nop
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	8a e0       	ldi	r24, 0x0A	; 10
 31a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 31e:	6c 2f       	mov	r22, r28
 320:	61 70       	andi	r22, 0x01	; 1
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 328:	c1 fb       	bst	r28, 1
 32a:	66 27       	eor	r22, r22
 32c:	60 f9       	bld	r22, 0
 32e:	85 e0       	ldi	r24, 0x05	; 5
 330:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 334:	c2 fb       	bst	r28, 2
 336:	66 27       	eor	r22, r22
 338:	60 f9       	bld	r22, 0
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 340:	c3 fb       	bst	r28, 3
 342:	66 27       	eor	r22, r22
 344:	60 f9       	bld	r22, 0
 346:	87 e0       	ldi	r24, 0x07	; 7
 348:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	88 e0       	ldi	r24, 0x08	; 8
 350:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	89 e0       	ldi	r24, 0x09	; 9
 358:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	8a e0       	ldi	r24, 0x0A	; 10
 360:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 364:	8f ec       	ldi	r24, 0xCF	; 207
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_WriteData+0xac>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_WriteData+0xb2>
 36e:	00 00       	nop
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_Writepin>
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <LCD_Clear>:
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 382:	8f ec       	ldi	r24, 0xCF	; 207
 384:	97 e0       	ldi	r25, 0x07	; 7
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Clear+0xa>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Clear+0x10>
 38c:	00 00       	nop
 38e:	08 95       	ret

00000390 <LCD_GOTO>:
 390:	88 23       	and	r24, r24
 392:	29 f0       	breq	.+10     	; 0x39e <LCD_GOTO+0xe>
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	31 f0       	breq	.+12     	; 0x3a4 <LCD_GOTO+0x14>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <LCD_GOTO+0x18>
 39e:	80 e8       	ldi	r24, 0x80	; 128
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <LCD_GOTO+0x18>
 3a4:	80 ec       	ldi	r24, 0xC0	; 192
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	60 31       	cpi	r22, 0x10	; 16
 3aa:	10 f4       	brcc	.+4      	; 0x3b0 <LCD_GOTO+0x20>
 3ac:	86 0f       	add	r24, r22
 3ae:	91 1d       	adc	r25, r1
 3b0:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_WriteCmd>
 3b4:	08 95       	ret

000003b6 <LCD_WriteString>:
}

/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	8c 01       	movw	r16, r24
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 3be:	c0 e0       	ldi	r28, 0x00	; 0
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <LCD_WriteString+0x1e>
	{
		LCD_WriteData(str[i]);
 3c2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_WriteData>
 3c6:	8f ec       	ldi	r24, 0xCF	; 207
 3c8:	97 e0       	ldi	r25, 0x07	; 7
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_WriteString+0x14>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCD_WriteString+0x1a>
 3d0:	00 00       	nop
/*----------------  Function used to Write string  --------------------*/

void LCD_WriteString(char *str)
{
	uint8_t i;
	for (i=0 ; str[i] ; i++)
 3d2:	cf 5f       	subi	r28, 0xFF	; 255
 3d4:	f8 01       	movw	r30, r16
 3d6:	ec 0f       	add	r30, r28
 3d8:	f1 1d       	adc	r31, r1
 3da:	80 81       	ld	r24, Z
 3dc:	81 11       	cpse	r24, r1
 3de:	f1 cf       	rjmp	.-30     	; 0x3c2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(str[i]);
		_delay_ms(1);
	}
}
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <Servo_Init>:

/*------------------------- Function Definitions -----------------------------*/

void Servo_Init(void)
{
	Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE , TIMER1_SCALER_8 , OCRA_NON_INVERTING , OCRB_DISCONNECTED);
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	42 e0       	ldi	r20, 0x02	; 2
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 91 04 	call	0x922	; 0x922 <Timer1_Init>
	ICR1 = 19999;
 3f4:	8f e1       	ldi	r24, 0x1F	; 31
 3f6:	9e e4       	ldi	r25, 0x4E	; 78
 3f8:	97 bd       	out	0x27, r25	; 39
 3fa:	86 bd       	out	0x26, r24	; 38
	SERVO_PIN = 999;
 3fc:	87 ee       	ldi	r24, 0xE7	; 231
 3fe:	93 e0       	ldi	r25, 0x03	; 3
 400:	9b bd       	out	0x2b, r25	; 43
 402:	8a bd       	out	0x2a, r24	; 42
 404:	08 95       	ret

00000406 <Servo_Angle>:
}

void Servo_Angle(uint8_t angle)
{
	SERVO_PIN = ((uint32_t)angle * 1000)/180 + 999;
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	a8 ee       	ldi	r26, 0xE8	; 232
 40c:	b3 e0       	ldi	r27, 0x03	; 3
 40e:	0e 94 a4 07 	call	0xf48	; 0xf48 <__umulhisi3>
 412:	24 eb       	ldi	r18, 0xB4	; 180
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	0e 94 5d 07 	call	0xeba	; 0xeba <__udivmodsi4>
 41e:	29 51       	subi	r18, 0x19	; 25
 420:	3c 4f       	sbci	r19, 0xFC	; 252
 422:	3b bd       	out	0x2b, r19	; 43
 424:	2a bd       	out	0x2a, r18	; 42
 426:	08 95       	ret

00000428 <main>:
#include "APP/To_Start.h"


int main(void)
{
	uart_init(bits_8,bit_1,Disabled,synchronous);
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 81 06 	call	0xd02	; 0xd02 <uart_init>
	Servo_Init();
 434:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Servo_Init>
	TIMER0_Init();
 438:	0e 94 00 04 	call	0x800	; 0x800 <TIMER0_Init>
	TIMER2_Init();
 43c:	0e 94 1b 06 	call	0xc36	; 0xc36 <TIMER2_Init>
	LCD_Init();
 440:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Init>
	LCD_GOTO(0,4);
 444:	64 e0       	ldi	r22, 0x04	; 4
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_GOTO>
	LCD_WriteString("Multi Level Garage");
 44c:	8b e9       	ldi	r24, 0x9B	; 155
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCD_WriteString>
    while (1) 
    {
		Start();
 454:	0e 94 51 00 	call	0xa2	; 0xa2 <Start>
 458:	fd cf       	rjmp	.-6      	; 0x454 <main+0x2c>

0000045a <DIO_Writepin>:

/*--------------------------- Function used to set pin value  ----------------------------------*/

void DIO_Writepin(DIO_PIN_type pin,DIO_PIN_voltagetype volt)
{
	DIO_Port_type port=pin/8;
 45a:	98 2f       	mov	r25, r24
 45c:	96 95       	lsr	r25
 45e:	96 95       	lsr	r25
 460:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 462:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH){
 464:	61 30       	cpi	r22, 0x01	; 1
 466:	e1 f5       	brne	.+120    	; 0x4e0 <DIO_Writepin+0x86>
		
		switch(port){
 468:	91 30       	cpi	r25, 0x01	; 1
 46a:	99 f0       	breq	.+38     	; 0x492 <DIO_Writepin+0x38>
 46c:	28 f0       	brcs	.+10     	; 0x478 <DIO_Writepin+0x1e>
 46e:	92 30       	cpi	r25, 0x02	; 2
 470:	e9 f0       	breq	.+58     	; 0x4ac <DIO_Writepin+0x52>
 472:	93 30       	cpi	r25, 0x03	; 3
 474:	41 f1       	breq	.+80     	; 0x4c6 <DIO_Writepin+0x6c>
 476:	08 95       	ret
			case PA :
			SET_BIT(PORTA,pin_num);
 478:	4b b3       	in	r20, 0x1b	; 27
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	b9 01       	movw	r22, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_Writepin+0x2c>
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_Writepin+0x28>
 48a:	cb 01       	movw	r24, r22
 48c:	84 2b       	or	r24, r20
 48e:	8b bb       	out	0x1b, r24	; 27
			break;
 490:	08 95       	ret
			case PB:
			SET_BIT(PORTB,pin_num);
 492:	48 b3       	in	r20, 0x18	; 24
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	b9 01       	movw	r22, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_Writepin+0x46>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	8a 95       	dec	r24
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_Writepin+0x42>
 4a4:	cb 01       	movw	r24, r22
 4a6:	84 2b       	or	r24, r20
 4a8:	88 bb       	out	0x18, r24	; 24
			break;
 4aa:	08 95       	ret
			case PC:
			SET_BIT(PORTC,pin_num);
 4ac:	45 b3       	in	r20, 0x15	; 21
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_Writepin+0x60>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_Writepin+0x5c>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	85 bb       	out	0x15, r24	; 21
			break;
 4c4:	08 95       	ret
			case PD:
			SET_BIT(PORTD,pin_num);
 4c6:	42 b3       	in	r20, 0x12	; 18
 4c8:	21 e0       	ldi	r18, 0x01	; 1
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	b9 01       	movw	r22, r18
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_Writepin+0x7a>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	8a 95       	dec	r24
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_Writepin+0x76>
 4d8:	cb 01       	movw	r24, r22
 4da:	84 2b       	or	r24, r20
 4dc:	82 bb       	out	0x12, r24	; 18
			break;
 4de:	08 95       	ret
			
		}
	}
	else if(volt==LOW){
 4e0:	61 11       	cpse	r22, r1
 4e2:	3f c0       	rjmp	.+126    	; 0x562 <DIO_Writepin+0x108>
		switch(port){
 4e4:	91 30       	cpi	r25, 0x01	; 1
 4e6:	a1 f0       	breq	.+40     	; 0x510 <DIO_Writepin+0xb6>
 4e8:	28 f0       	brcs	.+10     	; 0x4f4 <DIO_Writepin+0x9a>
 4ea:	92 30       	cpi	r25, 0x02	; 2
 4ec:	f9 f0       	breq	.+62     	; 0x52c <DIO_Writepin+0xd2>
 4ee:	93 30       	cpi	r25, 0x03	; 3
 4f0:	59 f1       	breq	.+86     	; 0x548 <DIO_Writepin+0xee>
 4f2:	08 95       	ret
			case PA :
			CLEAR_BIT(PORTA,pin_num);
 4f4:	4b b3       	in	r20, 0x1b	; 27
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_Writepin+0xa8>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_Writepin+0xa4>
 506:	cb 01       	movw	r24, r22
 508:	80 95       	com	r24
 50a:	84 23       	and	r24, r20
 50c:	8b bb       	out	0x1b, r24	; 27
			break;
 50e:	08 95       	ret
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 510:	48 b3       	in	r20, 0x18	; 24
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	b9 01       	movw	r22, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_Writepin+0xc4>
 51a:	66 0f       	add	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_Writepin+0xc0>
 522:	cb 01       	movw	r24, r22
 524:	80 95       	com	r24
 526:	84 23       	and	r24, r20
 528:	88 bb       	out	0x18, r24	; 24
			break;
 52a:	08 95       	ret
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 52c:	45 b3       	in	r20, 0x15	; 21
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	b9 01       	movw	r22, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_Writepin+0xe0>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_Writepin+0xdc>
 53e:	cb 01       	movw	r24, r22
 540:	80 95       	com	r24
 542:	84 23       	and	r24, r20
 544:	85 bb       	out	0x15, r24	; 21
			break;
 546:	08 95       	ret
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 548:	42 b3       	in	r20, 0x12	; 18
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_Writepin+0xfc>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_Writepin+0xf8>
 55a:	cb 01       	movw	r24, r22
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	82 bb       	out	0x12, r24	; 18
 562:	08 95       	ret

00000564 <DIO_Readpin>:

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
	DIO_Port_type port=pin/8;
 564:	98 2f       	mov	r25, r24
 566:	96 95       	lsr	r25
 568:	96 95       	lsr	r25
 56a:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 56c:	48 2f       	mov	r20, r24
 56e:	47 70       	andi	r20, 0x07	; 7
	switch(port){
 570:	91 30       	cpi	r25, 0x01	; 1
 572:	81 f0       	breq	.+32     	; 0x594 <DIO_Readpin+0x30>
 574:	28 f0       	brcs	.+10     	; 0x580 <DIO_Readpin+0x1c>
 576:	92 30       	cpi	r25, 0x02	; 2
 578:	b9 f0       	breq	.+46     	; 0x5a8 <DIO_Readpin+0x44>
 57a:	93 30       	cpi	r25, 0x03	; 3
 57c:	f9 f0       	breq	.+62     	; 0x5bc <DIO_Readpin+0x58>
 57e:	28 c0       	rjmp	.+80     	; 0x5d0 <DIO_Readpin+0x6c>
		case PA:
		res= READ_BIT(PINA,pin_num);
 580:	99 b3       	in	r25, 0x19	; 25
 582:	89 2f       	mov	r24, r25
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_Readpin+0x28>
 588:	95 95       	asr	r25
 58a:	87 95       	ror	r24
 58c:	4a 95       	dec	r20
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_Readpin+0x24>
 590:	81 70       	andi	r24, 0x01	; 1
		break;
 592:	08 95       	ret
		case PB:
		res= READ_BIT(PINB,pin_num);
 594:	26 b3       	in	r18, 0x16	; 22
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	c9 01       	movw	r24, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_Readpin+0x3c>
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	4a 95       	dec	r20
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_Readpin+0x38>
 5a4:	81 70       	andi	r24, 0x01	; 1
		break;
 5a6:	08 95       	ret
		case PC:
		res=READ_BIT(PINC,pin_num);
 5a8:	23 b3       	in	r18, 0x13	; 19
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	c9 01       	movw	r24, r18
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_Readpin+0x50>
 5b0:	95 95       	asr	r25
 5b2:	87 95       	ror	r24
 5b4:	4a 95       	dec	r20
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_Readpin+0x4c>
 5b8:	81 70       	andi	r24, 0x01	; 1
		break;
 5ba:	08 95       	ret
		case PD:
		res=READ_BIT(PIND,pin_num);
 5bc:	20 b3       	in	r18, 0x10	; 16
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	c9 01       	movw	r24, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_Readpin+0x64>
 5c4:	95 95       	asr	r25
 5c6:	87 95       	ror	r24
 5c8:	4a 95       	dec	r20
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_Readpin+0x60>
 5cc:	81 70       	andi	r24, 0x01	; 1
		break;
 5ce:	08 95       	ret
}

/*--------------------------- Function used to read pin value ----------------------------------*/

DIO_PIN_voltagetype DIO_Readpin(DIO_PIN_type pin){
	uint8_t res=0;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
		case PD:
		res=READ_BIT(PIND,pin_num);
		break;
	}
	return res;
}
 5d2:	08 95       	ret

000005d4 <DIO_Toggle>:
/*--------------------------- Function used to toggle pin ----------------------------------*/

void DIO_Toggle(DIO_PIN_type pin){
	DIO_Port_type port=pin/8;
 5d4:	98 2f       	mov	r25, r24
 5d6:	96 95       	lsr	r25
 5d8:	96 95       	lsr	r25
 5da:	96 95       	lsr	r25
	uint8_t pin_num=pin%8;
 5dc:	87 70       	andi	r24, 0x07	; 7
	switch(port)
 5de:	91 30       	cpi	r25, 0x01	; 1
 5e0:	99 f0       	breq	.+38     	; 0x608 <DIO_Toggle+0x34>
 5e2:	28 f0       	brcs	.+10     	; 0x5ee <DIO_Toggle+0x1a>
 5e4:	92 30       	cpi	r25, 0x02	; 2
 5e6:	e9 f0       	breq	.+58     	; 0x622 <DIO_Toggle+0x4e>
 5e8:	93 30       	cpi	r25, 0x03	; 3
 5ea:	41 f1       	breq	.+80     	; 0x63c <DIO_Toggle+0x68>
 5ec:	08 95       	ret
	{
		case PA:
		TOGGLE_BIT(PORTA,pin_num);
 5ee:	4b b3       	in	r20, 0x1b	; 27
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	b9 01       	movw	r22, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Toggle+0x28>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Toggle+0x24>
 600:	cb 01       	movw	r24, r22
 602:	84 27       	eor	r24, r20
 604:	8b bb       	out	0x1b, r24	; 27
		break;
 606:	08 95       	ret
		case PB:
		TOGGLE_BIT(PORTB,pin_num);
 608:	48 b3       	in	r20, 0x18	; 24
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	b9 01       	movw	r22, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_Toggle+0x42>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	8a 95       	dec	r24
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_Toggle+0x3e>
 61a:	cb 01       	movw	r24, r22
 61c:	84 27       	eor	r24, r20
 61e:	88 bb       	out	0x18, r24	; 24
		break;
 620:	08 95       	ret
		case PC:
		TOGGLE_BIT(PORTC,pin_num);
 622:	45 b3       	in	r20, 0x15	; 21
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	b9 01       	movw	r22, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_Toggle+0x5c>
 62c:	66 0f       	add	r22, r22
 62e:	77 1f       	adc	r23, r23
 630:	8a 95       	dec	r24
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_Toggle+0x58>
 634:	cb 01       	movw	r24, r22
 636:	84 27       	eor	r24, r20
 638:	85 bb       	out	0x15, r24	; 21
		break;
 63a:	08 95       	ret
		case PD:
		TOGGLE_BIT(PORTD,pin_num);
 63c:	42 b3       	in	r20, 0x12	; 18
 63e:	21 e0       	ldi	r18, 0x01	; 1
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	b9 01       	movw	r22, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_Toggle+0x76>
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	8a 95       	dec	r24
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_Toggle+0x72>
 64e:	cb 01       	movw	r24, r22
 650:	84 27       	eor	r24, r20
 652:	82 bb       	out	0x12, r24	; 18
 654:	08 95       	ret

00000656 <__vector_1>:

/*--------------------- Interrupt Functions (ISRs)  ---------------------------*/

/*-------------  (ISR of EXI0) ----------------*/

ISR(INT0_vect){
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
	if(Fptr_EXI0!=NULL_ptr){
 678:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <Fptr_EXI0>
 67c:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <Fptr_EXI0+0x1>
 680:	30 97       	sbiw	r30, 0x00	; 0
 682:	09 f0       	breq	.+2      	; 0x686 <__vector_1+0x30>
		Fptr_EXI0();
 684:	09 95       	icall
	}
}
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	bf 91       	pop	r27
 68c:	af 91       	pop	r26
 68e:	9f 91       	pop	r25
 690:	8f 91       	pop	r24
 692:	7f 91       	pop	r23
 694:	6f 91       	pop	r22
 696:	5f 91       	pop	r21
 698:	4f 91       	pop	r20
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <__vector_2>:

/*-------------  (ISR of EXI1) ----------------*/

ISR(INT1_vect){
 6a8:	1f 92       	push	r1
 6aa:	0f 92       	push	r0
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	0f 92       	push	r0
 6b0:	11 24       	eor	r1, r1
 6b2:	2f 93       	push	r18
 6b4:	3f 93       	push	r19
 6b6:	4f 93       	push	r20
 6b8:	5f 93       	push	r21
 6ba:	6f 93       	push	r22
 6bc:	7f 93       	push	r23
 6be:	8f 93       	push	r24
 6c0:	9f 93       	push	r25
 6c2:	af 93       	push	r26
 6c4:	bf 93       	push	r27
 6c6:	ef 93       	push	r30
 6c8:	ff 93       	push	r31
	
	if(Fptr_EXI1!=NULL_ptr){
 6ca:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Fptr_EXI1>
 6ce:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Fptr_EXI1+0x1>
 6d2:	30 97       	sbiw	r30, 0x00	; 0
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <__vector_2+0x30>
		Fptr_EXI1();
 6d6:	09 95       	icall
	}
}
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	bf 91       	pop	r27
 6de:	af 91       	pop	r26
 6e0:	9f 91       	pop	r25
 6e2:	8f 91       	pop	r24
 6e4:	7f 91       	pop	r23
 6e6:	6f 91       	pop	r22
 6e8:	5f 91       	pop	r21
 6ea:	4f 91       	pop	r20
 6ec:	3f 91       	pop	r19
 6ee:	2f 91       	pop	r18
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_3>:

/*-------------  (ISR of EXI2) ----------------*/

ISR(INT2_vect){
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
	
	if(Fptr_EXI2!=NULL_ptr){
 71c:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <Fptr_EXI2>
 720:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <Fptr_EXI2+0x1>
 724:	30 97       	sbiw	r30, 0x00	; 0
 726:	09 f0       	breq	.+2      	; 0x72a <__vector_3+0x30>
		Fptr_EXI2();
 728:	09 95       	icall
	}
 72a:	ff 91       	pop	r31
 72c:	ef 91       	pop	r30
 72e:	bf 91       	pop	r27
 730:	af 91       	pop	r26
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	7f 91       	pop	r23
 738:	6f 91       	pop	r22
 73a:	5f 91       	pop	r21
 73c:	4f 91       	pop	r20
 73e:	3f 91       	pop	r19
 740:	2f 91       	pop	r18
 742:	0f 90       	pop	r0
 744:	0f be       	out	0x3f, r0	; 63
 746:	0f 90       	pop	r0
 748:	1f 90       	pop	r1
 74a:	18 95       	reti

0000074c <SPI_recieve_noblock>:
	SET_BIT(SPCR,SPIE);
}

void SPI_interrupt_disable()
{
	CLEAR_BIT(SPCR,SPIE);
 74c:	2f b1       	in	r18, 0x0f	; 15
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
 752:	08 95       	ret

00000754 <__vector_12>:
}

ISR(SPI_STC_vect)
{
 754:	1f 92       	push	r1
 756:	0f 92       	push	r0
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	0f 92       	push	r0
 75c:	11 24       	eor	r1, r1
 75e:	2f 93       	push	r18
 760:	3f 93       	push	r19
 762:	4f 93       	push	r20
 764:	5f 93       	push	r21
 766:	6f 93       	push	r22
 768:	7f 93       	push	r23
 76a:	8f 93       	push	r24
 76c:	9f 93       	push	r25
 76e:	af 93       	push	r26
 770:	bf 93       	push	r27
 772:	ef 93       	push	r30
 774:	ff 93       	push	r31
	SPI_recieve_noblock(pdata);
 776:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <pdata>
 77a:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <pdata+0x1>
 77e:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_recieve_noblock>
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <fun_oc0>:

/*------------------------- TIMER0_SetCallBack Function Definition -----------------------------*/

void TIMER0_OVF_SetCallBack(void (*ptr)(void))
{
	Timer0_OVF_Fptr=ptr;
 7a4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <C.1779>
 7a8:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <C.1779+0x1>
 7ac:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <C.1779+0x2>
 7b0:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <C.1779+0x3>
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	a1 1d       	adc	r26, r1
 7b8:	b1 1d       	adc	r27, r1
 7ba:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <C.1779>
 7be:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <C.1779+0x1>
 7c2:	a0 93 b8 00 	sts	0x00B8, r26	; 0x8000b8 <C.1779+0x2>
 7c6:	b0 93 b9 00 	sts	0x00B9, r27	; 0x8000b9 <C.1779+0x3>
 7ca:	40 91 ba 00 	lds	r20, 0x00BA	; 0x8000ba <C_set>
 7ce:	50 91 bb 00 	lds	r21, 0x00BB	; 0x8000bb <C_set+0x1>
 7d2:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <C_set+0x2>
 7d6:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <C_set+0x3>
 7da:	84 17       	cp	r24, r20
 7dc:	95 07       	cpc	r25, r21
 7de:	a6 07       	cpc	r26, r22
 7e0:	b7 07       	cpc	r27, r23
 7e2:	69 f4       	brne	.+26     	; 0x7fe <fun_oc0+0x5a>
 7e4:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <pf_OC>
 7e8:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <pf_OC+0x1>
 7ec:	09 95       	icall
 7ee:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <C.1779>
 7f2:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <C.1779+0x1>
 7f6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <C.1779+0x2>
 7fa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <C.1779+0x3>
 7fe:	08 95       	ret

00000800 <TIMER0_Init>:
 800:	83 b7       	in	r24, 0x33	; 51
 802:	8f 7b       	andi	r24, 0xBF	; 191
 804:	83 bf       	out	0x33, r24	; 51
 806:	83 b7       	in	r24, 0x33	; 51
 808:	88 60       	ori	r24, 0x08	; 8
 80a:	83 bf       	out	0x33, r24	; 51
 80c:	83 b7       	in	r24, 0x33	; 51
 80e:	8e 7f       	andi	r24, 0xFE	; 254
 810:	83 bf       	out	0x33, r24	; 51
 812:	83 b7       	in	r24, 0x33	; 51
 814:	82 60       	ori	r24, 0x02	; 2
 816:	83 bf       	out	0x33, r24	; 51
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	8b 7f       	andi	r24, 0xFB	; 251
 81c:	83 bf       	out	0x33, r24	; 51
 81e:	83 b7       	in	r24, 0x33	; 51
 820:	8f 7e       	andi	r24, 0xEF	; 239
 822:	83 bf       	out	0x33, r24	; 51
 824:	83 b7       	in	r24, 0x33	; 51
 826:	8f 7d       	andi	r24, 0xDF	; 223
 828:	83 bf       	out	0x33, r24	; 51
 82a:	08 95       	ret

0000082c <TIMER0_OCInterrupt_Enable>:
 82c:	89 b7       	in	r24, 0x39	; 57
 82e:	82 60       	ori	r24, 0x02	; 2
 830:	89 bf       	out	0x39, r24	; 57
 832:	08 95       	ret

00000834 <TIMER0_OC_SetCallBack>:
}

void TIMER0_OC_SetCallBack(void (*ptr)(void))
{
	Timer0_OC0_Fptr=ptr;
 834:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Timer0_OC0_Fptr+0x1>
 838:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Timer0_OC0_Fptr>
 83c:	08 95       	ret

0000083e <TIMER0_SetInterrupt_ms>:
/*------------------------- Function Definition Of Timer 0 to call fun every n. of seconds -----------------------------*/

void TIMER0_SetInterrupt_ms(uint16_t time, void (*pf)(void))
{
	
	pf_OC=pf;
 83e:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <pf_OC+0x1>
 842:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <pf_OC>
	C_set=(1000000*time)/200;
 846:	dc 01       	movw	r26, r24
 848:	20 e4       	ldi	r18, 0x40	; 64
 84a:	32 e4       	ldi	r19, 0x42	; 66
 84c:	4f e0       	ldi	r20, 0x0F	; 15
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	0e 94 b3 07 	call	0xf66	; 0xf66 <__muluhisi3>
 854:	28 ec       	ldi	r18, 0xC8	; 200
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	0e 94 7f 07 	call	0xefe	; 0xefe <__divmodsi4>
 860:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <C_set>
 864:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <C_set+0x1>
 868:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <C_set+0x2>
 86c:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <C_set+0x3>
	OCR0=200;
 870:	88 ec       	ldi	r24, 0xC8	; 200
 872:	8c bf       	out	0x3c, r24	; 60
	TIMER0_OC_SetCallBack(fun_oc0);
 874:	82 ed       	ldi	r24, 0xD2	; 210
 876:	93 e0       	ldi	r25, 0x03	; 3
 878:	0e 94 1a 04 	call	0x834	; 0x834 <TIMER0_OC_SetCallBack>
	TIMER0_OCInterrupt_Enable();
 87c:	0e 94 16 04 	call	0x82c	; 0x82c <TIMER0_OCInterrupt_Enable>
 880:	08 95       	ret

00000882 <__vector_11>:
}
			/********************************* Timer 0 ISR functions ******************************/


	ISR(TIMER0_OVF_vect)
	{
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	3f 93       	push	r19
 890:	4f 93       	push	r20
 892:	5f 93       	push	r21
 894:	6f 93       	push	r22
 896:	7f 93       	push	r23
 898:	8f 93       	push	r24
 89a:	9f 93       	push	r25
 89c:	af 93       	push	r26
 89e:	bf 93       	push	r27
 8a0:	ef 93       	push	r30
 8a2:	ff 93       	push	r31
		if(Timer0_OVF_Fptr!=NULLptr)
 8a4:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <Timer0_OVF_Fptr>
 8a8:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <Timer0_OVF_Fptr+0x1>
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_11+0x30>
		{
			Timer0_OVF_Fptr();
 8b0:	09 95       	icall
		}
	}
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <__vector_10>:

	ISR(TIMER0_COMP_vect){
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	2f 93       	push	r18
 8e0:	3f 93       	push	r19
 8e2:	4f 93       	push	r20
 8e4:	5f 93       	push	r21
 8e6:	6f 93       	push	r22
 8e8:	7f 93       	push	r23
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	af 93       	push	r26
 8f0:	bf 93       	push	r27
 8f2:	ef 93       	push	r30
 8f4:	ff 93       	push	r31
		Timer0_OC0_Fptr();
 8f6:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <Timer0_OC0_Fptr>
 8fa:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <Timer0_OC0_Fptr+0x1>
 8fe:	09 95       	icall
	}
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	bf 91       	pop	r27
 906:	af 91       	pop	r26
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	7f 91       	pop	r23
 90e:	6f 91       	pop	r22
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <Timer1_Init>:
	
	pf_OC=pf;
	C_set=(1000000*time)/1000;
	OCR1A=1000;
	Timer1_OCA_SetCallBack(fun_oc1);
	Timer1_OCA_InterruptEnable();
 922:	82 30       	cpi	r24, 0x02	; 2
 924:	29 f1       	breq	.+74     	; 0x970 <Timer1_Init+0x4e>
 926:	28 f4       	brcc	.+10     	; 0x932 <Timer1_Init+0x10>
 928:	88 23       	and	r24, r24
 92a:	41 f0       	breq	.+16     	; 0x93c <Timer1_Init+0x1a>
 92c:	81 30       	cpi	r24, 0x01	; 1
 92e:	99 f0       	breq	.+38     	; 0x956 <Timer1_Init+0x34>
 930:	45 c0       	rjmp	.+138    	; 0x9bc <Timer1_Init+0x9a>
 932:	83 30       	cpi	r24, 0x03	; 3
 934:	51 f1       	breq	.+84     	; 0x98a <Timer1_Init+0x68>
 936:	84 30       	cpi	r24, 0x04	; 4
 938:	a9 f1       	breq	.+106    	; 0x9a4 <Timer1_Init+0x82>
 93a:	40 c0       	rjmp	.+128    	; 0x9bc <Timer1_Init+0x9a>
 93c:	8f b5       	in	r24, 0x2f	; 47
 93e:	8e 7f       	andi	r24, 0xFE	; 254
 940:	8f bd       	out	0x2f, r24	; 47
 942:	8f b5       	in	r24, 0x2f	; 47
 944:	8d 7f       	andi	r24, 0xFD	; 253
 946:	8f bd       	out	0x2f, r24	; 47
 948:	8e b5       	in	r24, 0x2e	; 46
 94a:	87 7f       	andi	r24, 0xF7	; 247
 94c:	8e bd       	out	0x2e, r24	; 46
 94e:	8e b5       	in	r24, 0x2e	; 46
 950:	8f 7e       	andi	r24, 0xEF	; 239
 952:	8e bd       	out	0x2e, r24	; 46
 954:	33 c0       	rjmp	.+102    	; 0x9bc <Timer1_Init+0x9a>
 956:	8f b5       	in	r24, 0x2f	; 47
 958:	8e 7f       	andi	r24, 0xFE	; 254
 95a:	8f bd       	out	0x2f, r24	; 47
 95c:	8f b5       	in	r24, 0x2f	; 47
 95e:	8d 7f       	andi	r24, 0xFD	; 253
 960:	8f bd       	out	0x2f, r24	; 47
 962:	8e b5       	in	r24, 0x2e	; 46
 964:	88 60       	ori	r24, 0x08	; 8
 966:	8e bd       	out	0x2e, r24	; 46
 968:	8e b5       	in	r24, 0x2e	; 46
 96a:	80 61       	ori	r24, 0x10	; 16
 96c:	8e bd       	out	0x2e, r24	; 46
 96e:	26 c0       	rjmp	.+76     	; 0x9bc <Timer1_Init+0x9a>
 970:	8f b5       	in	r24, 0x2f	; 47
 972:	8e 7f       	andi	r24, 0xFE	; 254
 974:	8f bd       	out	0x2f, r24	; 47
 976:	8f b5       	in	r24, 0x2f	; 47
 978:	8d 7f       	andi	r24, 0xFD	; 253
 97a:	8f bd       	out	0x2f, r24	; 47
 97c:	8e b5       	in	r24, 0x2e	; 46
 97e:	88 60       	ori	r24, 0x08	; 8
 980:	8e bd       	out	0x2e, r24	; 46
 982:	8e b5       	in	r24, 0x2e	; 46
 984:	8f 7e       	andi	r24, 0xEF	; 239
 986:	8e bd       	out	0x2e, r24	; 46
 988:	19 c0       	rjmp	.+50     	; 0x9bc <Timer1_Init+0x9a>
 98a:	8f b5       	in	r24, 0x2f	; 47
 98c:	8e 7f       	andi	r24, 0xFE	; 254
 98e:	8f bd       	out	0x2f, r24	; 47
 990:	8f b5       	in	r24, 0x2f	; 47
 992:	82 60       	ori	r24, 0x02	; 2
 994:	8f bd       	out	0x2f, r24	; 47
 996:	8e b5       	in	r24, 0x2e	; 46
 998:	88 60       	ori	r24, 0x08	; 8
 99a:	8e bd       	out	0x2e, r24	; 46
 99c:	8e b5       	in	r24, 0x2e	; 46
 99e:	80 61       	ori	r24, 0x10	; 16
 9a0:	8e bd       	out	0x2e, r24	; 46
 9a2:	0c c0       	rjmp	.+24     	; 0x9bc <Timer1_Init+0x9a>
 9a4:	8f b5       	in	r24, 0x2f	; 47
 9a6:	81 60       	ori	r24, 0x01	; 1
 9a8:	8f bd       	out	0x2f, r24	; 47
 9aa:	8f b5       	in	r24, 0x2f	; 47
 9ac:	82 60       	ori	r24, 0x02	; 2
 9ae:	8f bd       	out	0x2f, r24	; 47
 9b0:	8e b5       	in	r24, 0x2e	; 46
 9b2:	88 60       	ori	r24, 0x08	; 8
 9b4:	8e bd       	out	0x2e, r24	; 46
 9b6:	8e b5       	in	r24, 0x2e	; 46
 9b8:	80 61       	ori	r24, 0x10	; 16
 9ba:	8e bd       	out	0x2e, r24	; 46
 9bc:	86 2f       	mov	r24, r22
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	88 30       	cpi	r24, 0x08	; 8
 9c2:	91 05       	cpc	r25, r1
 9c4:	08 f0       	brcs	.+2      	; 0x9c8 <Timer1_Init+0xa6>
 9c6:	54 c0       	rjmp	.+168    	; 0xa70 <Timer1_Init+0x14e>
 9c8:	fc 01       	movw	r30, r24
 9ca:	e6 5d       	subi	r30, 0xD6	; 214
 9cc:	ff 4f       	sbci	r31, 0xFF	; 255
 9ce:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__tablejump2__>
 9d2:	8e b5       	in	r24, 0x2e	; 46
 9d4:	8e 7f       	andi	r24, 0xFE	; 254
 9d6:	8e bd       	out	0x2e, r24	; 46
 9d8:	8e b5       	in	r24, 0x2e	; 46
 9da:	8d 7f       	andi	r24, 0xFD	; 253
 9dc:	8e bd       	out	0x2e, r24	; 46
 9de:	8e b5       	in	r24, 0x2e	; 46
 9e0:	8b 7f       	andi	r24, 0xFB	; 251
 9e2:	8e bd       	out	0x2e, r24	; 46
 9e4:	45 c0       	rjmp	.+138    	; 0xa70 <Timer1_Init+0x14e>
 9e6:	8e b5       	in	r24, 0x2e	; 46
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	8e bd       	out	0x2e, r24	; 46
 9ec:	8e b5       	in	r24, 0x2e	; 46
 9ee:	8d 7f       	andi	r24, 0xFD	; 253
 9f0:	8e bd       	out	0x2e, r24	; 46
 9f2:	8e b5       	in	r24, 0x2e	; 46
 9f4:	8b 7f       	andi	r24, 0xFB	; 251
 9f6:	8e bd       	out	0x2e, r24	; 46
 9f8:	3b c0       	rjmp	.+118    	; 0xa70 <Timer1_Init+0x14e>
 9fa:	8e b5       	in	r24, 0x2e	; 46
 9fc:	8e 7f       	andi	r24, 0xFE	; 254
 9fe:	8e bd       	out	0x2e, r24	; 46
 a00:	8e b5       	in	r24, 0x2e	; 46
 a02:	82 60       	ori	r24, 0x02	; 2
 a04:	8e bd       	out	0x2e, r24	; 46
 a06:	8e b5       	in	r24, 0x2e	; 46
 a08:	8b 7f       	andi	r24, 0xFB	; 251
 a0a:	8e bd       	out	0x2e, r24	; 46
 a0c:	31 c0       	rjmp	.+98     	; 0xa70 <Timer1_Init+0x14e>
 a0e:	8e b5       	in	r24, 0x2e	; 46
 a10:	81 60       	ori	r24, 0x01	; 1
 a12:	8e bd       	out	0x2e, r24	; 46
 a14:	8e b5       	in	r24, 0x2e	; 46
 a16:	82 60       	ori	r24, 0x02	; 2
 a18:	8e bd       	out	0x2e, r24	; 46
 a1a:	8e b5       	in	r24, 0x2e	; 46
 a1c:	8b 7f       	andi	r24, 0xFB	; 251
 a1e:	8e bd       	out	0x2e, r24	; 46
 a20:	27 c0       	rjmp	.+78     	; 0xa70 <Timer1_Init+0x14e>
 a22:	8e b5       	in	r24, 0x2e	; 46
 a24:	8e 7f       	andi	r24, 0xFE	; 254
 a26:	8e bd       	out	0x2e, r24	; 46
 a28:	8e b5       	in	r24, 0x2e	; 46
 a2a:	8d 7f       	andi	r24, 0xFD	; 253
 a2c:	8e bd       	out	0x2e, r24	; 46
 a2e:	8e b5       	in	r24, 0x2e	; 46
 a30:	84 60       	ori	r24, 0x04	; 4
 a32:	8e bd       	out	0x2e, r24	; 46
 a34:	1d c0       	rjmp	.+58     	; 0xa70 <Timer1_Init+0x14e>
 a36:	8f b5       	in	r24, 0x2f	; 47
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	8f bd       	out	0x2f, r24	; 47
 a3c:	8f b5       	in	r24, 0x2f	; 47
 a3e:	8d 7f       	andi	r24, 0xFD	; 253
 a40:	8f bd       	out	0x2f, r24	; 47
 a42:	8f b5       	in	r24, 0x2f	; 47
 a44:	84 60       	ori	r24, 0x04	; 4
 a46:	8f bd       	out	0x2f, r24	; 47
 a48:	13 c0       	rjmp	.+38     	; 0xa70 <Timer1_Init+0x14e>
 a4a:	8e b5       	in	r24, 0x2e	; 46
 a4c:	8e 7f       	andi	r24, 0xFE	; 254
 a4e:	8e bd       	out	0x2e, r24	; 46
 a50:	8e b5       	in	r24, 0x2e	; 46
 a52:	82 60       	ori	r24, 0x02	; 2
 a54:	8e bd       	out	0x2e, r24	; 46
 a56:	8e b5       	in	r24, 0x2e	; 46
 a58:	84 60       	ori	r24, 0x04	; 4
 a5a:	8e bd       	out	0x2e, r24	; 46
 a5c:	09 c0       	rjmp	.+18     	; 0xa70 <Timer1_Init+0x14e>
 a5e:	8e b5       	in	r24, 0x2e	; 46
 a60:	81 60       	ori	r24, 0x01	; 1
 a62:	8e bd       	out	0x2e, r24	; 46
 a64:	8e b5       	in	r24, 0x2e	; 46
 a66:	82 60       	ori	r24, 0x02	; 2
 a68:	8e bd       	out	0x2e, r24	; 46
 a6a:	8e b5       	in	r24, 0x2e	; 46
 a6c:	84 60       	ori	r24, 0x04	; 4
 a6e:	8e bd       	out	0x2e, r24	; 46
 a70:	41 30       	cpi	r20, 0x01	; 1
 a72:	69 f0       	breq	.+26     	; 0xa8e <Timer1_Init+0x16c>
 a74:	28 f0       	brcs	.+10     	; 0xa80 <Timer1_Init+0x15e>
 a76:	42 30       	cpi	r20, 0x02	; 2
 a78:	89 f0       	breq	.+34     	; 0xa9c <Timer1_Init+0x17a>
 a7a:	43 30       	cpi	r20, 0x03	; 3
 a7c:	b1 f0       	breq	.+44     	; 0xaaa <Timer1_Init+0x188>
 a7e:	1b c0       	rjmp	.+54     	; 0xab6 <Timer1_Init+0x194>
 a80:	8f b5       	in	r24, 0x2f	; 47
 a82:	8f 7b       	andi	r24, 0xBF	; 191
 a84:	8f bd       	out	0x2f, r24	; 47
 a86:	8f b5       	in	r24, 0x2f	; 47
 a88:	8f 77       	andi	r24, 0x7F	; 127
 a8a:	8f bd       	out	0x2f, r24	; 47
 a8c:	14 c0       	rjmp	.+40     	; 0xab6 <Timer1_Init+0x194>
 a8e:	8f b5       	in	r24, 0x2f	; 47
 a90:	80 64       	ori	r24, 0x40	; 64
 a92:	8f bd       	out	0x2f, r24	; 47
 a94:	8f b5       	in	r24, 0x2f	; 47
 a96:	8f 77       	andi	r24, 0x7F	; 127
 a98:	8f bd       	out	0x2f, r24	; 47
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <Timer1_Init+0x194>
 a9c:	8f b5       	in	r24, 0x2f	; 47
 a9e:	8f 7b       	andi	r24, 0xBF	; 191
 aa0:	8f bd       	out	0x2f, r24	; 47
 aa2:	8f b5       	in	r24, 0x2f	; 47
 aa4:	80 68       	ori	r24, 0x80	; 128
 aa6:	8f bd       	out	0x2f, r24	; 47
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <Timer1_Init+0x194>
 aaa:	8f b5       	in	r24, 0x2f	; 47
 aac:	80 64       	ori	r24, 0x40	; 64
 aae:	8f bd       	out	0x2f, r24	; 47
 ab0:	8f b5       	in	r24, 0x2f	; 47
 ab2:	80 68       	ori	r24, 0x80	; 128
 ab4:	8f bd       	out	0x2f, r24	; 47
 ab6:	21 30       	cpi	r18, 0x01	; 1
 ab8:	69 f0       	breq	.+26     	; 0xad4 <Timer1_Init+0x1b2>
 aba:	28 f0       	brcs	.+10     	; 0xac6 <Timer1_Init+0x1a4>
 abc:	22 30       	cpi	r18, 0x02	; 2
 abe:	89 f0       	breq	.+34     	; 0xae2 <Timer1_Init+0x1c0>
 ac0:	23 30       	cpi	r18, 0x03	; 3
 ac2:	b1 f0       	breq	.+44     	; 0xaf0 <Timer1_Init+0x1ce>
 ac4:	08 95       	ret
 ac6:	8f b5       	in	r24, 0x2f	; 47
 ac8:	8f 7e       	andi	r24, 0xEF	; 239
 aca:	8f bd       	out	0x2f, r24	; 47
 acc:	8f b5       	in	r24, 0x2f	; 47
 ace:	8f 7d       	andi	r24, 0xDF	; 223
 ad0:	8f bd       	out	0x2f, r24	; 47
 ad2:	08 95       	ret
 ad4:	8f b5       	in	r24, 0x2f	; 47
 ad6:	80 61       	ori	r24, 0x10	; 16
 ad8:	8f bd       	out	0x2f, r24	; 47
 ada:	8f b5       	in	r24, 0x2f	; 47
 adc:	8f 7d       	andi	r24, 0xDF	; 223
 ade:	8f bd       	out	0x2f, r24	; 47
 ae0:	08 95       	ret
 ae2:	8f b5       	in	r24, 0x2f	; 47
 ae4:	8f 7e       	andi	r24, 0xEF	; 239
 ae6:	8f bd       	out	0x2f, r24	; 47
 ae8:	8f b5       	in	r24, 0x2f	; 47
 aea:	80 62       	ori	r24, 0x20	; 32
 aec:	8f bd       	out	0x2f, r24	; 47
 aee:	08 95       	ret
 af0:	8f b5       	in	r24, 0x2f	; 47
 af2:	80 61       	ori	r24, 0x10	; 16
 af4:	8f bd       	out	0x2f, r24	; 47
 af6:	8f b5       	in	r24, 0x2f	; 47
 af8:	80 62       	ori	r24, 0x20	; 32
 afa:	8f bd       	out	0x2f, r24	; 47
 afc:	08 95       	ret

00000afe <__vector_9>:
}

/*********************************Timer 1 ISR functions*********************************************/

ISR(TIMER1_OVF_vect)
{
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	2f 93       	push	r18
 b0a:	3f 93       	push	r19
 b0c:	4f 93       	push	r20
 b0e:	5f 93       	push	r21
 b10:	6f 93       	push	r22
 b12:	7f 93       	push	r23
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	af 93       	push	r26
 b1a:	bf 93       	push	r27
 b1c:	ef 93       	push	r30
 b1e:	ff 93       	push	r31
	Timer1_OVF_Fptr();
 b20:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <Timer1_OVF_Fptr>
 b24:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <Timer1_OVF_Fptr+0x1>
 b28:	09 95       	icall
}
 b2a:	ff 91       	pop	r31
 b2c:	ef 91       	pop	r30
 b2e:	bf 91       	pop	r27
 b30:	af 91       	pop	r26
 b32:	9f 91       	pop	r25
 b34:	8f 91       	pop	r24
 b36:	7f 91       	pop	r23
 b38:	6f 91       	pop	r22
 b3a:	5f 91       	pop	r21
 b3c:	4f 91       	pop	r20
 b3e:	3f 91       	pop	r19
 b40:	2f 91       	pop	r18
 b42:	0f 90       	pop	r0
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	0f 90       	pop	r0
 b48:	1f 90       	pop	r1
 b4a:	18 95       	reti

00000b4c <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
 b4c:	1f 92       	push	r1
 b4e:	0f 92       	push	r0
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	0f 92       	push	r0
 b54:	11 24       	eor	r1, r1
 b56:	2f 93       	push	r18
 b58:	3f 93       	push	r19
 b5a:	4f 93       	push	r20
 b5c:	5f 93       	push	r21
 b5e:	6f 93       	push	r22
 b60:	7f 93       	push	r23
 b62:	8f 93       	push	r24
 b64:	9f 93       	push	r25
 b66:	af 93       	push	r26
 b68:	bf 93       	push	r27
 b6a:	ef 93       	push	r30
 b6c:	ff 93       	push	r31
	Timer1_OCA_Fptr();
 b6e:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <Timer1_OCA_Fptr>
 b72:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <Timer1_OCA_Fptr+0x1>
 b76:	09 95       	icall
}
 b78:	ff 91       	pop	r31
 b7a:	ef 91       	pop	r30
 b7c:	bf 91       	pop	r27
 b7e:	af 91       	pop	r26
 b80:	9f 91       	pop	r25
 b82:	8f 91       	pop	r24
 b84:	7f 91       	pop	r23
 b86:	6f 91       	pop	r22
 b88:	5f 91       	pop	r21
 b8a:	4f 91       	pop	r20
 b8c:	3f 91       	pop	r19
 b8e:	2f 91       	pop	r18
 b90:	0f 90       	pop	r0
 b92:	0f be       	out	0x3f, r0	; 63
 b94:	0f 90       	pop	r0
 b96:	1f 90       	pop	r1
 b98:	18 95       	reti

00000b9a <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
 b9a:	1f 92       	push	r1
 b9c:	0f 92       	push	r0
 b9e:	0f b6       	in	r0, 0x3f	; 63
 ba0:	0f 92       	push	r0
 ba2:	11 24       	eor	r1, r1
 ba4:	2f 93       	push	r18
 ba6:	3f 93       	push	r19
 ba8:	4f 93       	push	r20
 baa:	5f 93       	push	r21
 bac:	6f 93       	push	r22
 bae:	7f 93       	push	r23
 bb0:	8f 93       	push	r24
 bb2:	9f 93       	push	r25
 bb4:	af 93       	push	r26
 bb6:	bf 93       	push	r27
 bb8:	ef 93       	push	r30
 bba:	ff 93       	push	r31
	Timer1_OCB_Fptr();
 bbc:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <Timer1_OCB_Fptr>
 bc0:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <Timer1_OCB_Fptr+0x1>
 bc4:	09 95       	icall
}
 bc6:	ff 91       	pop	r31
 bc8:	ef 91       	pop	r30
 bca:	bf 91       	pop	r27
 bcc:	af 91       	pop	r26
 bce:	9f 91       	pop	r25
 bd0:	8f 91       	pop	r24
 bd2:	7f 91       	pop	r23
 bd4:	6f 91       	pop	r22
 bd6:	5f 91       	pop	r21
 bd8:	4f 91       	pop	r20
 bda:	3f 91       	pop	r19
 bdc:	2f 91       	pop	r18
 bde:	0f 90       	pop	r0
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	0f 90       	pop	r0
 be4:	1f 90       	pop	r1
 be6:	18 95       	reti

00000be8 <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 be8:	1f 92       	push	r1
 bea:	0f 92       	push	r0
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	0f 92       	push	r0
 bf0:	11 24       	eor	r1, r1
 bf2:	2f 93       	push	r18
 bf4:	3f 93       	push	r19
 bf6:	4f 93       	push	r20
 bf8:	5f 93       	push	r21
 bfa:	6f 93       	push	r22
 bfc:	7f 93       	push	r23
 bfe:	8f 93       	push	r24
 c00:	9f 93       	push	r25
 c02:	af 93       	push	r26
 c04:	bf 93       	push	r27
 c06:	ef 93       	push	r30
 c08:	ff 93       	push	r31
	Timer1_ICU_Fptr();
 c0a:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <Timer1_ICU_Fptr>
 c0e:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <Timer1_ICU_Fptr+0x1>
 c12:	09 95       	icall
}
 c14:	ff 91       	pop	r31
 c16:	ef 91       	pop	r30
 c18:	bf 91       	pop	r27
 c1a:	af 91       	pop	r26
 c1c:	9f 91       	pop	r25
 c1e:	8f 91       	pop	r24
 c20:	7f 91       	pop	r23
 c22:	6f 91       	pop	r22
 c24:	5f 91       	pop	r21
 c26:	4f 91       	pop	r20
 c28:	3f 91       	pop	r19
 c2a:	2f 91       	pop	r18
 c2c:	0f 90       	pop	r0
 c2e:	0f be       	out	0x3f, r0	; 63
 c30:	0f 90       	pop	r0
 c32:	1f 90       	pop	r1
 c34:	18 95       	reti

00000c36 <TIMER2_Init>:
		
		pf_OC=pf;
		C_set=(1000000*time)/200;
		OCR2=200;
		TIMER2_OC_SetCallBack(fun_oc2);
		TIMER2_OCInterrupt_Enable();
 c36:	85 b5       	in	r24, 0x25	; 37
 c38:	8f 7b       	andi	r24, 0xBF	; 191
 c3a:	85 bd       	out	0x25, r24	; 37
 c3c:	85 b5       	in	r24, 0x25	; 37
 c3e:	88 60       	ori	r24, 0x08	; 8
 c40:	85 bd       	out	0x25, r24	; 37
 c42:	85 b5       	in	r24, 0x25	; 37
 c44:	8e 7f       	andi	r24, 0xFE	; 254
 c46:	85 bd       	out	0x25, r24	; 37
 c48:	85 b5       	in	r24, 0x25	; 37
 c4a:	82 60       	ori	r24, 0x02	; 2
 c4c:	85 bd       	out	0x25, r24	; 37
 c4e:	85 b5       	in	r24, 0x25	; 37
 c50:	8b 7f       	andi	r24, 0xFB	; 251
 c52:	85 bd       	out	0x25, r24	; 37
 c54:	85 b5       	in	r24, 0x25	; 37
 c56:	8f 7e       	andi	r24, 0xEF	; 239
 c58:	85 bd       	out	0x25, r24	; 37
 c5a:	85 b5       	in	r24, 0x25	; 37
 c5c:	8f 7d       	andi	r24, 0xDF	; 223
 c5e:	85 bd       	out	0x25, r24	; 37
 c60:	08 95       	ret

00000c62 <__vector_5>:
	}

	/********************************* Timer 2 ISR functions ******************************/

	ISR(TIMER2_OVF_vect)
	{
 c62:	1f 92       	push	r1
 c64:	0f 92       	push	r0
 c66:	0f b6       	in	r0, 0x3f	; 63
 c68:	0f 92       	push	r0
 c6a:	11 24       	eor	r1, r1
 c6c:	2f 93       	push	r18
 c6e:	3f 93       	push	r19
 c70:	4f 93       	push	r20
 c72:	5f 93       	push	r21
 c74:	6f 93       	push	r22
 c76:	7f 93       	push	r23
 c78:	8f 93       	push	r24
 c7a:	9f 93       	push	r25
 c7c:	af 93       	push	r26
 c7e:	bf 93       	push	r27
 c80:	ef 93       	push	r30
 c82:	ff 93       	push	r31
		if(Timer2_OVF_Fptr!=NULLptr)
 c84:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <Timer2_OVF_Fptr>
 c88:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <Timer2_OVF_Fptr+0x1>
 c8c:	30 97       	sbiw	r30, 0x00	; 0
 c8e:	09 f0       	breq	.+2      	; 0xc92 <__vector_5+0x30>
		{
			Timer2_OVF_Fptr();
 c90:	09 95       	icall
		}
	}
 c92:	ff 91       	pop	r31
 c94:	ef 91       	pop	r30
 c96:	bf 91       	pop	r27
 c98:	af 91       	pop	r26
 c9a:	9f 91       	pop	r25
 c9c:	8f 91       	pop	r24
 c9e:	7f 91       	pop	r23
 ca0:	6f 91       	pop	r22
 ca2:	5f 91       	pop	r21
 ca4:	4f 91       	pop	r20
 ca6:	3f 91       	pop	r19
 ca8:	2f 91       	pop	r18
 caa:	0f 90       	pop	r0
 cac:	0f be       	out	0x3f, r0	; 63
 cae:	0f 90       	pop	r0
 cb0:	1f 90       	pop	r1
 cb2:	18 95       	reti

00000cb4 <__vector_4>:

	ISR(TIMER2_COMP_vect){
 cb4:	1f 92       	push	r1
 cb6:	0f 92       	push	r0
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	0f 92       	push	r0
 cbc:	11 24       	eor	r1, r1
 cbe:	2f 93       	push	r18
 cc0:	3f 93       	push	r19
 cc2:	4f 93       	push	r20
 cc4:	5f 93       	push	r21
 cc6:	6f 93       	push	r22
 cc8:	7f 93       	push	r23
 cca:	8f 93       	push	r24
 ccc:	9f 93       	push	r25
 cce:	af 93       	push	r26
 cd0:	bf 93       	push	r27
 cd2:	ef 93       	push	r30
 cd4:	ff 93       	push	r31
		Timer2_OC2_Fptr();
 cd6:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Timer2_OC2_Fptr>
 cda:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Timer2_OC2_Fptr+0x1>
 cde:	09 95       	icall
	}
 ce0:	ff 91       	pop	r31
 ce2:	ef 91       	pop	r30
 ce4:	bf 91       	pop	r27
 ce6:	af 91       	pop	r26
 ce8:	9f 91       	pop	r25
 cea:	8f 91       	pop	r24
 cec:	7f 91       	pop	r23
 cee:	6f 91       	pop	r22
 cf0:	5f 91       	pop	r21
 cf2:	4f 91       	pop	r20
 cf4:	3f 91       	pop	r19
 cf6:	2f 91       	pop	r18
 cf8:	0f 90       	pop	r0
 cfa:	0f be       	out	0x3f, r0	; 63
 cfc:	0f 90       	pop	r0
 cfe:	1f 90       	pop	r1
 d00:	18 95       	reti

00000d02 <uart_init>:
	else
	{
		return 0;
	}
	
}
 d02:	82 30       	cpi	r24, 0x02	; 2
 d04:	f9 f0       	breq	.+62     	; 0xd44 <uart_init+0x42>
 d06:	28 f4       	brcc	.+10     	; 0xd12 <uart_init+0x10>
 d08:	88 23       	and	r24, r24
 d0a:	41 f0       	breq	.+16     	; 0xd1c <uart_init+0x1a>
 d0c:	81 30       	cpi	r24, 0x01	; 1
 d0e:	81 f0       	breq	.+32     	; 0xd30 <uart_init+0x2e>
 d10:	36 c0       	rjmp	.+108    	; 0xd7e <uart_init+0x7c>
 d12:	83 30       	cpi	r24, 0x03	; 3
 d14:	09 f1       	breq	.+66     	; 0xd58 <uart_init+0x56>
 d16:	84 30       	cpi	r24, 0x04	; 4
 d18:	49 f1       	breq	.+82     	; 0xd6c <uart_init+0x6a>
 d1a:	31 c0       	rjmp	.+98     	; 0xd7e <uart_init+0x7c>
 d1c:	80 b5       	in	r24, 0x20	; 32
 d1e:	8d 7f       	andi	r24, 0xFD	; 253
 d20:	80 bd       	out	0x20, r24	; 32
 d22:	80 b5       	in	r24, 0x20	; 32
 d24:	8b 7f       	andi	r24, 0xFB	; 251
 d26:	80 bd       	out	0x20, r24	; 32
 d28:	8a b1       	in	r24, 0x0a	; 10
 d2a:	8b 7f       	andi	r24, 0xFB	; 251
 d2c:	8a b9       	out	0x0a, r24	; 10
 d2e:	27 c0       	rjmp	.+78     	; 0xd7e <uart_init+0x7c>
 d30:	80 b5       	in	r24, 0x20	; 32
 d32:	82 60       	ori	r24, 0x02	; 2
 d34:	80 bd       	out	0x20, r24	; 32
 d36:	80 b5       	in	r24, 0x20	; 32
 d38:	8b 7f       	andi	r24, 0xFB	; 251
 d3a:	80 bd       	out	0x20, r24	; 32
 d3c:	8a b1       	in	r24, 0x0a	; 10
 d3e:	8b 7f       	andi	r24, 0xFB	; 251
 d40:	8a b9       	out	0x0a, r24	; 10
 d42:	1d c0       	rjmp	.+58     	; 0xd7e <uart_init+0x7c>
 d44:	80 b5       	in	r24, 0x20	; 32
 d46:	8d 7f       	andi	r24, 0xFD	; 253
 d48:	80 bd       	out	0x20, r24	; 32
 d4a:	80 b5       	in	r24, 0x20	; 32
 d4c:	84 60       	ori	r24, 0x04	; 4
 d4e:	80 bd       	out	0x20, r24	; 32
 d50:	8a b1       	in	r24, 0x0a	; 10
 d52:	8b 7f       	andi	r24, 0xFB	; 251
 d54:	8a b9       	out	0x0a, r24	; 10
 d56:	13 c0       	rjmp	.+38     	; 0xd7e <uart_init+0x7c>
 d58:	80 b5       	in	r24, 0x20	; 32
 d5a:	82 60       	ori	r24, 0x02	; 2
 d5c:	80 bd       	out	0x20, r24	; 32
 d5e:	80 b5       	in	r24, 0x20	; 32
 d60:	84 60       	ori	r24, 0x04	; 4
 d62:	80 bd       	out	0x20, r24	; 32
 d64:	8a b1       	in	r24, 0x0a	; 10
 d66:	8b 7f       	andi	r24, 0xFB	; 251
 d68:	8a b9       	out	0x0a, r24	; 10
 d6a:	09 c0       	rjmp	.+18     	; 0xd7e <uart_init+0x7c>
 d6c:	80 b5       	in	r24, 0x20	; 32
 d6e:	82 60       	ori	r24, 0x02	; 2
 d70:	80 bd       	out	0x20, r24	; 32
 d72:	80 b5       	in	r24, 0x20	; 32
 d74:	84 60       	ori	r24, 0x04	; 4
 d76:	80 bd       	out	0x20, r24	; 32
 d78:	8a b1       	in	r24, 0x0a	; 10
 d7a:	84 60       	ori	r24, 0x04	; 4
 d7c:	8a b9       	out	0x0a, r24	; 10
 d7e:	66 23       	and	r22, r22
 d80:	19 f0       	breq	.+6      	; 0xd88 <uart_init+0x86>
 d82:	61 30       	cpi	r22, 0x01	; 1
 d84:	29 f0       	breq	.+10     	; 0xd90 <uart_init+0x8e>
 d86:	07 c0       	rjmp	.+14     	; 0xd96 <uart_init+0x94>
 d88:	80 b5       	in	r24, 0x20	; 32
 d8a:	87 7f       	andi	r24, 0xF7	; 247
 d8c:	80 bd       	out	0x20, r24	; 32
 d8e:	03 c0       	rjmp	.+6      	; 0xd96 <uart_init+0x94>
 d90:	80 b5       	in	r24, 0x20	; 32
 d92:	88 60       	ori	r24, 0x08	; 8
 d94:	80 bd       	out	0x20, r24	; 32
 d96:	41 30       	cpi	r20, 0x01	; 1
 d98:	59 f0       	breq	.+22     	; 0xdb0 <uart_init+0xae>
 d9a:	18 f0       	brcs	.+6      	; 0xda2 <uart_init+0xa0>
 d9c:	42 30       	cpi	r20, 0x02	; 2
 d9e:	79 f0       	breq	.+30     	; 0xdbe <uart_init+0xbc>
 da0:	14 c0       	rjmp	.+40     	; 0xdca <uart_init+0xc8>
 da2:	80 b5       	in	r24, 0x20	; 32
 da4:	8f 7e       	andi	r24, 0xEF	; 239
 da6:	80 bd       	out	0x20, r24	; 32
 da8:	80 b5       	in	r24, 0x20	; 32
 daa:	8f 7d       	andi	r24, 0xDF	; 223
 dac:	80 bd       	out	0x20, r24	; 32
 dae:	0d c0       	rjmp	.+26     	; 0xdca <uart_init+0xc8>
 db0:	80 b5       	in	r24, 0x20	; 32
 db2:	8f 7e       	andi	r24, 0xEF	; 239
 db4:	80 bd       	out	0x20, r24	; 32
 db6:	80 b5       	in	r24, 0x20	; 32
 db8:	80 62       	ori	r24, 0x20	; 32
 dba:	80 bd       	out	0x20, r24	; 32
 dbc:	06 c0       	rjmp	.+12     	; 0xdca <uart_init+0xc8>
 dbe:	80 b5       	in	r24, 0x20	; 32
 dc0:	80 61       	ori	r24, 0x10	; 16
 dc2:	80 bd       	out	0x20, r24	; 32
 dc4:	80 b5       	in	r24, 0x20	; 32
 dc6:	80 62       	ori	r24, 0x20	; 32
 dc8:	80 bd       	out	0x20, r24	; 32
 dca:	22 23       	and	r18, r18
 dcc:	19 f0       	breq	.+6      	; 0xdd4 <uart_init+0xd2>
 dce:	21 30       	cpi	r18, 0x01	; 1
 dd0:	41 f0       	breq	.+16     	; 0xde2 <uart_init+0xe0>
 dd2:	0a c0       	rjmp	.+20     	; 0xde8 <uart_init+0xe6>
 dd4:	80 b5       	in	r24, 0x20	; 32
 dd6:	8f 7b       	andi	r24, 0xBF	; 191
 dd8:	80 bd       	out	0x20, r24	; 32
 dda:	8b b1       	in	r24, 0x0b	; 11
 ddc:	8d 7f       	andi	r24, 0xFD	; 253
 dde:	8b b9       	out	0x0b, r24	; 11
 de0:	03 c0       	rjmp	.+6      	; 0xde8 <uart_init+0xe6>
 de2:	80 b5       	in	r24, 0x20	; 32
 de4:	80 64       	ori	r24, 0x40	; 64
 de6:	80 bd       	out	0x20, r24	; 32
 de8:	83 e3       	ldi	r24, 0x33	; 51
 dea:	89 b9       	out	0x09, r24	; 9
 dec:	8a b1       	in	r24, 0x0a	; 10
 dee:	80 61       	ori	r24, 0x10	; 16
 df0:	8a b9       	out	0x0a, r24	; 10
 df2:	8a b1       	in	r24, 0x0a	; 10
 df4:	88 60       	ori	r24, 0x08	; 8
 df6:	8a b9       	out	0x0a, r24	; 10
 df8:	08 95       	ret

00000dfa <uart_recieve>:
 dfa:	5f 9b       	sbis	0x0b, 7	; 11
 dfc:	fe cf       	rjmp	.-4      	; 0xdfa <uart_recieve>
 dfe:	8c b1       	in	r24, 0x0c	; 12
 e00:	08 95       	ret

00000e02 <uart_send_noblock>:

void uart_send_noblock(uint8_t c)
{
	UDR=c;
 e02:	8c b9       	out	0x0c, r24	; 12
 e04:	08 95       	ret

00000e06 <US_read>:

uint8_t US_read(ADC_Channel cha)
{
	uint8_t x;
	return x;
 e06:	80 e0       	ldi	r24, 0x00	; 0
 e08:	08 95       	ret

00000e0a <uart_recieve_string>:
	TX_Complete_Interrupt_Enable();
	uart_send_noblock(str[0]);
}

void uart_recieve_Asynch(uint8_t *str)
{
 e0a:	ef 92       	push	r14
 e0c:	ff 92       	push	r15
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	8c 01       	movw	r16, r24
 e16:	0e 94 fd 06 	call	0xdfa	; 0xdfa <uart_recieve>
 e1a:	f8 01       	movw	r30, r16
 e1c:	80 83       	st	Z, r24
 e1e:	c0 e0       	ldi	r28, 0x00	; 0
 e20:	08 c0       	rjmp	.+16     	; 0xe32 <uart_recieve_string+0x28>
 e22:	cf 5f       	subi	r28, 0xFF	; 255
 e24:	78 01       	movw	r14, r16
 e26:	ec 0e       	add	r14, r28
 e28:	f1 1c       	adc	r15, r1
 e2a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <uart_recieve>
 e2e:	f7 01       	movw	r30, r14
 e30:	80 83       	st	Z, r24
 e32:	f8 01       	movw	r30, r16
 e34:	ec 0f       	add	r30, r28
 e36:	f1 1d       	adc	r31, r1
 e38:	80 81       	ld	r24, Z
 e3a:	8d 30       	cpi	r24, 0x0D	; 13
 e3c:	91 f7       	brne	.-28     	; 0xe22 <uart_recieve_string+0x18>
 e3e:	cf 91       	pop	r28
 e40:	1f 91       	pop	r17
 e42:	0f 91       	pop	r16
 e44:	ff 90       	pop	r15
 e46:	ef 90       	pop	r14
 e48:	08 95       	ret

00000e4a <__vector_15>:
		
}

ISR(USART_TXC_vect)
{
 e4a:	1f 92       	push	r1
 e4c:	0f 92       	push	r0
 e4e:	0f b6       	in	r0, 0x3f	; 63
 e50:	0f 92       	push	r0
 e52:	11 24       	eor	r1, r1
 e54:	2f 93       	push	r18
 e56:	3f 93       	push	r19
 e58:	4f 93       	push	r20
 e5a:	5f 93       	push	r21
 e5c:	6f 93       	push	r22
 e5e:	7f 93       	push	r23
 e60:	8f 93       	push	r24
 e62:	9f 93       	push	r25
 e64:	af 93       	push	r26
 e66:	bf 93       	push	r27
 e68:	ef 93       	push	r30
 e6a:	ff 93       	push	r31
	static uint8_t i=1;
	if (pdata[i]!=0)
 e6c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 e70:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <pdata>
 e74:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <pdata+0x1>
 e78:	e8 0f       	add	r30, r24
 e7a:	f1 1d       	adc	r31, r1
 e7c:	80 81       	ld	r24, Z
 e7e:	88 23       	and	r24, r24
 e80:	41 f0       	breq	.+16     	; 0xe92 <__vector_15+0x48>
	{
		uart_send_noblock(pdata[i]);
 e82:	0e 94 01 07 	call	0xe02	; 0xe02 <uart_send_noblock>
		i++;
 e86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 e8a:	8f 5f       	subi	r24, 0xFF	; 255
 e8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 e90:	03 c0       	rjmp	.+6      	; 0xe98 <__vector_15+0x4e>
	}
	else
	{
		i=1;	
 e92:	81 e0       	ldi	r24, 0x01	; 1
 e94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
 e98:	ff 91       	pop	r31
 e9a:	ef 91       	pop	r30
 e9c:	bf 91       	pop	r27
 e9e:	af 91       	pop	r26
 ea0:	9f 91       	pop	r25
 ea2:	8f 91       	pop	r24
 ea4:	7f 91       	pop	r23
 ea6:	6f 91       	pop	r22
 ea8:	5f 91       	pop	r21
 eaa:	4f 91       	pop	r20
 eac:	3f 91       	pop	r19
 eae:	2f 91       	pop	r18
 eb0:	0f 90       	pop	r0
 eb2:	0f be       	out	0x3f, r0	; 63
 eb4:	0f 90       	pop	r0
 eb6:	1f 90       	pop	r1
 eb8:	18 95       	reti

00000eba <__udivmodsi4>:
 eba:	a1 e2       	ldi	r26, 0x21	; 33
 ebc:	1a 2e       	mov	r1, r26
 ebe:	aa 1b       	sub	r26, r26
 ec0:	bb 1b       	sub	r27, r27
 ec2:	fd 01       	movw	r30, r26
 ec4:	0d c0       	rjmp	.+26     	; 0xee0 <__udivmodsi4_ep>

00000ec6 <__udivmodsi4_loop>:
 ec6:	aa 1f       	adc	r26, r26
 ec8:	bb 1f       	adc	r27, r27
 eca:	ee 1f       	adc	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	a2 17       	cp	r26, r18
 ed0:	b3 07       	cpc	r27, r19
 ed2:	e4 07       	cpc	r30, r20
 ed4:	f5 07       	cpc	r31, r21
 ed6:	20 f0       	brcs	.+8      	; 0xee0 <__udivmodsi4_ep>
 ed8:	a2 1b       	sub	r26, r18
 eda:	b3 0b       	sbc	r27, r19
 edc:	e4 0b       	sbc	r30, r20
 ede:	f5 0b       	sbc	r31, r21

00000ee0 <__udivmodsi4_ep>:
 ee0:	66 1f       	adc	r22, r22
 ee2:	77 1f       	adc	r23, r23
 ee4:	88 1f       	adc	r24, r24
 ee6:	99 1f       	adc	r25, r25
 ee8:	1a 94       	dec	r1
 eea:	69 f7       	brne	.-38     	; 0xec6 <__udivmodsi4_loop>
 eec:	60 95       	com	r22
 eee:	70 95       	com	r23
 ef0:	80 95       	com	r24
 ef2:	90 95       	com	r25
 ef4:	9b 01       	movw	r18, r22
 ef6:	ac 01       	movw	r20, r24
 ef8:	bd 01       	movw	r22, r26
 efa:	cf 01       	movw	r24, r30
 efc:	08 95       	ret

00000efe <__divmodsi4>:
 efe:	05 2e       	mov	r0, r21
 f00:	97 fb       	bst	r25, 7
 f02:	1e f4       	brtc	.+6      	; 0xf0a <__divmodsi4+0xc>
 f04:	00 94       	com	r0
 f06:	0e 94 96 07 	call	0xf2c	; 0xf2c <__negsi2>
 f0a:	57 fd       	sbrc	r21, 7
 f0c:	07 d0       	rcall	.+14     	; 0xf1c <__divmodsi4_neg2>
 f0e:	0e 94 5d 07 	call	0xeba	; 0xeba <__udivmodsi4>
 f12:	07 fc       	sbrc	r0, 7
 f14:	03 d0       	rcall	.+6      	; 0xf1c <__divmodsi4_neg2>
 f16:	4e f4       	brtc	.+18     	; 0xf2a <__divmodsi4_exit>
 f18:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__negsi2>

00000f1c <__divmodsi4_neg2>:
 f1c:	50 95       	com	r21
 f1e:	40 95       	com	r20
 f20:	30 95       	com	r19
 f22:	21 95       	neg	r18
 f24:	3f 4f       	sbci	r19, 0xFF	; 255
 f26:	4f 4f       	sbci	r20, 0xFF	; 255
 f28:	5f 4f       	sbci	r21, 0xFF	; 255

00000f2a <__divmodsi4_exit>:
 f2a:	08 95       	ret

00000f2c <__negsi2>:
 f2c:	90 95       	com	r25
 f2e:	80 95       	com	r24
 f30:	70 95       	com	r23
 f32:	61 95       	neg	r22
 f34:	7f 4f       	sbci	r23, 0xFF	; 255
 f36:	8f 4f       	sbci	r24, 0xFF	; 255
 f38:	9f 4f       	sbci	r25, 0xFF	; 255
 f3a:	08 95       	ret

00000f3c <__tablejump2__>:
 f3c:	ee 0f       	add	r30, r30
 f3e:	ff 1f       	adc	r31, r31
 f40:	05 90       	lpm	r0, Z+
 f42:	f4 91       	lpm	r31, Z
 f44:	e0 2d       	mov	r30, r0
 f46:	09 94       	ijmp

00000f48 <__umulhisi3>:
 f48:	a2 9f       	mul	r26, r18
 f4a:	b0 01       	movw	r22, r0
 f4c:	b3 9f       	mul	r27, r19
 f4e:	c0 01       	movw	r24, r0
 f50:	a3 9f       	mul	r26, r19
 f52:	70 0d       	add	r23, r0
 f54:	81 1d       	adc	r24, r1
 f56:	11 24       	eor	r1, r1
 f58:	91 1d       	adc	r25, r1
 f5a:	b2 9f       	mul	r27, r18
 f5c:	70 0d       	add	r23, r0
 f5e:	81 1d       	adc	r24, r1
 f60:	11 24       	eor	r1, r1
 f62:	91 1d       	adc	r25, r1
 f64:	08 95       	ret

00000f66 <__muluhisi3>:
 f66:	0e 94 a4 07 	call	0xf48	; 0xf48 <__umulhisi3>
 f6a:	a5 9f       	mul	r26, r21
 f6c:	90 0d       	add	r25, r0
 f6e:	b4 9f       	mul	r27, r20
 f70:	90 0d       	add	r25, r0
 f72:	a4 9f       	mul	r26, r20
 f74:	80 0d       	add	r24, r0
 f76:	91 1d       	adc	r25, r1
 f78:	11 24       	eor	r1, r1
 f7a:	08 95       	ret

00000f7c <strcmp>:
 f7c:	fb 01       	movw	r30, r22
 f7e:	dc 01       	movw	r26, r24
 f80:	8d 91       	ld	r24, X+
 f82:	01 90       	ld	r0, Z+
 f84:	80 19       	sub	r24, r0
 f86:	01 10       	cpse	r0, r1
 f88:	d9 f3       	breq	.-10     	; 0xf80 <strcmp+0x4>
 f8a:	99 0b       	sbc	r25, r25
 f8c:	08 95       	ret

00000f8e <_exit>:
 f8e:	f8 94       	cli

00000f90 <__stop_program>:
 f90:	ff cf       	rjmp	.-2      	; 0xf90 <__stop_program>
